* Web appendix

This is the web appendix to our manuscript entitled /Estimation of/
/time-specific intervention effects on continuously distributed/
/time-to-event outcomes by targeted maximum likelihood estimation/.

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports none  :session *R* :cache yes  
setwd("~/research/TMLE-from-2020june/survival-baseline/Web-appendix-iterative-competing-risks-tmle")
#+END_SRC

** Overview


** Load packages and functions

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes  
library(data.table)
library(zoo)
library(glmnet)
library(survival)
library(stringr)
library(ggplot2) 
library(ltmle)
library(nleqslv)
library(parallel)
library(foreach)
library(doParallel)
library(prodlim)
library(gridExtra)
library(survival)
library(riskRegression)
library(Matrix)
library(hdnom)
library(MASS)
library(xtable)
library(timereg)
library(cmprsk)
library(randomForestSRC)
#+END_SRC    

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes  
source("./R/sim.data.continuous.R") 
source("./R/contmle.R") 
source("./R/cox.loss.fun.R") 
source("./R/lebesgue.loss.fun.R")
source("./R/cv.fun.R")     
source("./R/basis.fun.R")
source("./R/hal.screening.R")
source("./R/fit.hal.R")   
source("./R/cox.sl.R")  
source("./R/fit.categorical.R")
source("./R/predict.catfit.R")
#+END_SRC    


** Data example

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes  
data(follic, package="randomForestSRC")
follic <- data.table(follic) 

#-- convert variables:
follic[, stage:=as.numeric(clinstg==2)] 
follic[, chemo:=as.numeric(ch=="Y")]
follic <- follic[, -c("clinstg", "ch"), with=FALSE] 
#+END_SRC    


Events: 
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output :exports code  :session *R* :cache yes  
follic[, table(status)] 
#+END_SRC    

#+RESULTS[(2022-07-14 09:03:16) 9d0de82b04fe4af758068f6d4f4ff8b6754f108d]:
: status
:   0   1   2 
: 193 272  76

Distribution of observed time to event: 
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output :exports code  :session *R* :cache yes  
follic[, summary(time)] 
#+END_SRC    

#+RESULTS[(2022-07-14 09:03:07) 2124dc3cf51f939c219af64b262d4f7ed9db1b5b]:
:      Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
:  0.002738  1.919233  5.464750  7.393791 10.850103 31.101985

Events before time-horizon of interest:
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output :exports code  :session *R* :cache yes  
follic[time<=10, table(status)]  
#+END_SRC    

#+RESULTS[(2022-07-14 09:03:10) 1346d603729d6e5c05793b24b4849cbd7dd54950]:
: status
:   0   1   2 
:  95 251  46


** Baseline hazard estimation

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports none  :session *R* :cache yes
#######################################################################################

#--- try see what super learner would pick
bhaz.sl <- contmle(follic, estimation=list("outcome"=list(fit="sl",
                                                          model=Surv(time, status==1)~chemo+stage+hgb+age,
                                                          lambda.cvs=seq(0.008, 0.02, length=10)),
                                           "cens"=list(fit="sl",
                                                       model=Surv(time, status==0)~chemo+stage+hgb+age),
                                           "cr2"=list(fit="sl",
                                                      model=Surv(time, status==2)~chemo+stage+hgb+age)
                                           ),
                   treat.model=chemo~stage,
                   treat.effect="ate",
                   no.small.steps=500,
                   sl.models=list(mod1=list(Surv(time, status==1)~chemo+stage+hgb+age, t0 = (1:50)/2000)), 
                   output.km=TRUE,
                   output.bhaz=TRUE, 
                   V=3, lambda.cvs=seq(0.1, 0.03, length=10), maxit=1e5, penalize.time=FALSE,
                   verbose=TRUE,
                   iterative=TRUE,
                   tau=20, target=1)

#--- uninformative censoring
bhaz.uninformative.cens <-
  contmle(follic, estimation=list("outcome"=list(fit="cox",
                                                 model=Surv(time, status==1)~chemo+stage+hgb+age, lambda.cvs=seq(0.008,
                                                                                                                 0.02, length=10)), "cens"=list(fit="cox", model=Surv(time,
                                                                                                                                                                      status==0)~1), "cr2"=list(fit="cox", model=Surv(time,
                                                                                                                                                                                                                      status==2)~chemo+stage+hgb+age) ), treat.model=chemo~stage,
          treat.effect="ate", no.small.steps=500,
          sl.models=list(mod1=list(Surv(time, status==1)~chemo+stage+hgb+age, t0
                                   = (1:50)/2000)), output.km=TRUE, output.bhaz=TRUE, V=3,
          lambda.cvs=seq(0.1, 0.03, length=10), maxit=1e5, penalize.time=FALSE,
          verbose=TRUE, iterative=TRUE, tau=20, target=1)


#######################################################################################

bhazs <- bhaz.sl[[1]]

bhazs[, chaz1 := cumsum(dhaz1*exp1), by = "chemo"]
bhazs[, chaz2 := cumsum(dhaz2*exp2), by = "chemo"] 
bhazs[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"]
 
#######################################################################################
#+END_SRC



#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long <- melt(bhazs, id.vars=c("chemo", "time")) 
bhazs.long[, variable2:=substr(variable,1,4)]  
bhazs.long <- bhazs.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.long[, chemo:=paste0("chemo = ", chemo)]

ggplot(bhazs.long) + geom_point(aes(x=log(time), y=log(value))) +
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16), 
        plot.title = element_text(size = 16, hjust = 0.9),  
        strip.background = element_blank())+ 
  ylab("log(chaz)") + ggtitle("Log cumulative hazards as functions of log observed event times:")
#+END_SRC

#+RESULTS[(2022-07-14 09:37:14) 2471d280ab9612876934dbf72ae38edb97769deb]:
[[file:./figures/fig-log-hazards-log-time.png]]

Idea: Fit Weibull distributions that are allowed change over time,
corresponding to enforcing piecewise linearity in the previous plots.

*** Cause one events (with one changepoint)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard1-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
log.t0.1 <- -0.5
log.t1.1 <- 0.75
log.t2.1 <- 2

kmin.1.t1.1 <- min((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])>log.t0.1])
kmax.1.t1.1 <- max((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])<log.t1.1])
kmin.1.t1.0 <- min((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])>log.t0.1])
kmax.1.t1.0 <- max((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])<log.t1.1])

kmin.1.t2.1 <- min((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])>log.t1.1])
kmax.1.t2.1 <- max((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])<log.t2.1])
kmin.1.t2.0 <- min((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])>log.t1.1])
kmax.1.t2.0 <- max((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])<log.t2.1])

#plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t1.1:kmax.1.t1.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t1.1:kmax.1.t1.1]))
fit.status1.t1.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t1.1:kmax.1.t1.1])
#abline(a = coef(fit.status1.t1.1)[1], b = coef(fit.status1.t1.1)[2], col = "red")
(gamma.status1.t1.1 <- coef(fit.status1.t1.1)[2])
(lambda.status1.t1.1 <- exp(coef(fit.status1.t1.1)[1]/gamma.status1.t1.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t1.0:kmax.1.t1.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t1.0:kmax.1.t1.0]))
fit.status1.t1.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t1.0:kmax.1.t1.0])
#abline(a = coef(fit.status1.t1.0)[1], b = coef(fit.status1.t1.0)[2], col = "red")
(gamma.status1.t1.0 <- coef(fit.status1.t1.0)[2])
(lambda.status1.t1.0 <- exp(coef(fit.status1.t1.0)[1]/gamma.status1.t1.0))

# plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t2.1:kmax.1.t2.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t2.1:kmax.1.t2.1]))
fit.status1.t2.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t2.1:kmax.1.t2.1])
#abline(a = coef(fit.status1.t2.1)[1], b = coef(fit.status1.t2.1)[2], col = "red")
(gamma.status1.t2.1 <- coef(fit.status1.t2.1)[2])
(lambda.status1.t2.1 <- exp(coef(fit.status1.t2.1)[1]/gamma.status1.t2.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t2.0:kmax.1.t2.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t2.0:kmax.1.t2.0]))
fit.status1.t2.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t2.0:kmax.1.t2.0])
#abline(a = coef(fit.status1.t2.0)[1], b = coef(fit.status1.t2.0)[2], col = "red")
(gamma.status1.t2.0 <- coef(fit.status1.t2.0)[2])
(lambda.status1.t2.0 <- exp(coef(fit.status1.t2.0)[1]/gamma.status1.t2.0))

bhazs.long[time>=exp(log.t0.1) & time<=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.1*log(lambda.status1.t1.1) + gamma.status1.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.1) & time<=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.0*log(lambda.status1.t1.0) + gamma.status1.t1.0*log(time))]

bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.1*log(lambda.status1.t2.1) + gamma.status1.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.0*log(lambda.status1.t2.0) + gamma.status1.t2.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 1"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.text = element_text(size=16), 
        strip.background = element_blank())+  
  ylab("log(chaz)") + ggtitle("Fitting two straight lines:")
#+END_SRC

#+RESULTS[(2022-07-14 09:26:07) 3cb935d531f2e02b979e70753cf3549722127b64]:
[[file:./figures/fig-log-hazards-log-time-hazard1-changepoint.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard1-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.1*log(lambda.status1.t1.1) + gamma.status1.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.0*log(lambda.status1.t1.0) + gamma.status1.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.1*log(lambda.status1.t2.1) + gamma.status1.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.0*log(lambda.status1.t2.0) + gamma.status1.t2.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 1"]) +
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.3),
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:") 
#+END_SRC

#+RESULTS[(2022-07-14 09:28:43) c2afbedb18419eae1e9c20bd3c6b0b75b58e0cda]:
[[file:./figures/fig-hazards-time-hazard1-changepoint.png]]

*** Cause one events (with one changepoint)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard1-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs <- bhaz.sl[[1]]

bhazs[, chaz1 := cumsum(dhaz1*exp1), by = "chemo"]
bhazs[, chaz2 := cumsum(dhaz2*exp2), by = "chemo"]
bhazs[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"]

bhazs.long <- melt(bhazs, id.vars=c("chemo", "time")) 
bhazs.long[, variable2:=substr(variable,1,4)] 
bhazs.long <- bhazs.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.long[, chemo:=paste0("chemo = ", chemo)]

log.t0.1 <- -2#-0.5
log.t1.1 <- -0.5#0.75
log.t2.1 <- 2.5#2
log.t3.1 <- 3.5#3

kmin.1.t1.1 <- min((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])>log.t0.1])
kmax.1.t1.1 <- max((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])<log.t1.1])
kmin.1.t1.0 <- min((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])>log.t0.1])
kmax.1.t1.0 <- max((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])<log.t1.1])

kmin.1.t2.1 <- min((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])>log.t1.1])
kmax.1.t2.1 <- max((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])<log.t2.1])
kmin.1.t2.0 <- min((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])>log.t1.1])
kmax.1.t2.0 <- max((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])<log.t2.1])

kmin.1.t3.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t2.1])
kmax.1.t3.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t3.1])
kmin.1.t3.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t2.1])
kmax.1.t3.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t3.1])


#plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t1.1:kmax.1.t1.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t1.1:kmax.1.t1.1]))
fit.status1.t1.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t1.1:kmax.1.t1.1])
#abline(a = coef(fit.status1.t1.1)[1], b = coef(fit.status1.t1.1)[2], col = "red")
(gamma.status1.t1.1 <- coef(fit.status1.t1.1)[2])
(lambda.status1.t1.1 <- exp(coef(fit.status1.t1.1)[1]/gamma.status1.t1.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t1.0:kmax.1.t1.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t1.0:kmax.1.t1.0]))
fit.status1.t1.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t1.0:kmax.1.t1.0])
#abline(a = coef(fit.status1.t1.0)[1], b = coef(fit.status1.t1.0)[2], col = "red")
(gamma.status1.t1.0 <- coef(fit.status1.t1.0)[2])
(lambda.status1.t1.0 <- exp(coef(fit.status1.t1.0)[1]/gamma.status1.t1.0))

# plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t2.1:kmax.1.t2.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t2.1:kmax.1.t2.1]))
fit.status1.t2.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t2.1:kmax.1.t2.1])
#abline(a = coef(fit.status1.t2.1)[1], b = coef(fit.status1.t2.1)[2], col = "red")
(gamma.status1.t2.1 <- coef(fit.status1.t2.1)[2])
(lambda.status1.t2.1 <- exp(coef(fit.status1.t2.1)[1]/gamma.status1.t2.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t2.0:kmax.1.t2.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t2.0:kmax.1.t2.0]))
fit.status1.t2.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t2.0:kmax.1.t2.0])
#abline(a = coef(fit.status1.t2.0)[1], b = coef(fit.status1.t2.0)[2], col = "red")
(gamma.status1.t2.0 <- coef(fit.status1.t2.0)[2])
(lambda.status1.t2.0 <- exp(coef(fit.status1.t2.0)[1]/gamma.status1.t2.0))

# plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t3.1:kmax.1.t3.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t3.1:kmax.1.t3.1]))
fit.status1.t3.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t3.1:kmax.1.t3.1])
#abline(a = coef(fit.status1.t3.1)[1], b = coef(fit.status1.t3.1)[2], col = "red")
(gamma.status1.t3.1 <- coef(fit.status1.t3.1)[2])
(lambda.status1.t3.1 <- exp(coef(fit.status1.t3.1)[1]/gamma.status1.t3.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t3.0:kmax.1.t3.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t3.0:kmax.1.t3.0]))
fit.status1.t3.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t3.0:kmax.1.t3.0])
#abline(a = coef(fit.status1.t3.0)[1], b = coef(fit.status1.t3.0)[2], col = "red")
(gamma.status1.t3.0 <- coef(fit.status1.t3.0)[2])
(lambda.status1.t3.0 <- exp(coef(fit.status1.t3.0)[1]/gamma.status1.t3.0))

bhazs.long[time>=exp(log.t0.1) & time<=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.1*log(lambda.status1.t1.1) + gamma.status1.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.1) & time<=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.0*log(lambda.status1.t1.0) + gamma.status1.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.1*log(lambda.status1.t2.1) + gamma.status1.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.0*log(lambda.status1.t2.0) + gamma.status1.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.1*log(lambda.status1.t3.1) + gamma.status1.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.0*log(lambda.status1.t3.0) + gamma.status1.t3.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 1"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.text = element_text(size=16), 
        strip.background = element_blank())+  
  ylab("log(chaz)") + ggtitle("Fitting three straight lines:")

#+END_SRC

#+RESULTS[(2022-07-14 10:45:16) 7651262e0c4c7761072911235e0d98038827dee6]:
[[file:./figures/fig-log-hazards-log-time-hazard1-2changepoints.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard1-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.1*log(lambda.status1.t1.1) + gamma.status1.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.0*log(lambda.status1.t1.0) + gamma.status1.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.1*log(lambda.status1.t2.1) + gamma.status1.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.0*log(lambda.status1.t2.0) + gamma.status1.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.1*log(lambda.status1.t3.1) + gamma.status1.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.0*log(lambda.status1.t3.0) + gamma.status1.t3.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 1"]) +
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.3),
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:") 
#+END_SRC

#+RESULTS[(2022-07-14 10:45:39) 8b3ebb63a5d03f407af219ab12c9c9030bf62cb7]:
[[file:./figures/fig-hazards-time-hazard1-2changepoints.png]]



*** Cause two events


#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard2-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
log.t0.2 <- 0 
log.t1.2 <- 1.5 
log.t2.2 <- 3  

kmin.2.t1.1 <- min((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])>log.t0.2])
kmax.2.t1.1 <- max((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])<log.t1.2])
kmin.2.t1.0 <- min((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])>log.t0.2])
kmax.2.t1.0 <- max((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])<log.t1.2])

kmin.2.t2.1 <- min((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])>log.t1.2])
kmax.2.t2.1 <- max((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])<log.t2.2])
kmin.2.t2.0 <- min((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])>log.t1.2])
kmax.2.t2.0 <- max((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])<log.t2.2])

#plot(log(bhazs[chaz2>0 & chemo==1][["time"]])[kmin.2.t1.1:kmax.2.t1.1],log(bhazs[chaz2>0 & chemo==1][["chaz2"]][kmin.2.t1.1:kmax.2.t1.1]))
fit.status2.t1.1 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==1][kmin.2.t1.1:kmax.2.t1.1])
#abline(a = coef(fit.status2.t1.1)[1], b = coef(fit.status2.t1.1)[2], col = "red")
(gamma.status2.t1.1 <- coef(fit.status2.t1.1)[2])
(lambda.status2.t1.1 <- exp(coef(fit.status2.t1.1)[1]/gamma.status2.t1.1))
#plot(log(bhazs[chaz2>0 & chemo==0][["time"]])[kmin.2.t1.0:kmax.2.t1.0],log(bhazs[chaz2>0 & chemo==0][["chaz2"]][kmin.2.t1.0:kmax.2.t1.0]))
fit.status2.t1.0 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==0][kmin.2.t1.0:kmax.2.t1.0])
#abline(a = coef(fit.status2.t1.0)[1], b = coef(fit.status2.t1.0)[2], col = "red")
(gamma.status2.t1.0 <- coef(fit.status2.t1.0)[2])
(lambda.status2.t1.0 <- exp(coef(fit.status2.t1.0)[1]/gamma.status2.t1.0))

# plot(log(bhazs[chaz2>0 & chemo==1][["time"]])[kmin.2.t2.1:kmax.2.t2.1],log(bhazs[chaz2>0 & chemo==1][["chaz2"]][kmin.2.t2.1:kmax.2.t2.1]))
fit.status2.t2.1 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==1][kmin.2.t2.1:kmax.2.t2.1])
#abline(a = coef(fit.status2.t2.1)[1], b = coef(fit.status2.t2.1)[2], col = "red")
(gamma.status2.t2.1 <- coef(fit.status2.t2.1)[2])
(lambda.status2.t2.1 <- exp(coef(fit.status2.t2.1)[1]/gamma.status2.t2.1))
#plot(log(bhazs[chaz2>0 & chemo==0][["time"]])[kmin.2.t2.0:kmax.2.t2.0],log(bhazs[chaz2>0 & chemo==0][["chaz2"]][kmin.2.t2.0:kmax.2.t2.0]))
fit.status2.t2.0 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==0][kmin.2.t2.0:kmax.2.t2.0])
#abline(a = coef(fit.status2.t2.0)[1], b = coef(fit.status2.t2.0)[2], col = "red")
(gamma.status2.t2.0 <- coef(fit.status2.t2.0)[2])
(lambda.status2.t2.0 <- exp(coef(fit.status2.t2.0)[1]/gamma.status2.t2.0))

bhazs.long[time>=exp(log.t0.2) & time<=exp(log.t1.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t1.1*log(lambda.status2.t1.1) + gamma.status2.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.2) & time<=exp(log.t1.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t1.0*log(lambda.status2.t1.0) + gamma.status2.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.2) & time<=exp(log.t2.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.1*log(lambda.status2.t2.1) + gamma.status2.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.2) & time<=exp(log.t2.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.0*log(lambda.status2.t2.0) + gamma.status2.t2.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 2"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.background = element_blank())+
  ylab("log(chaz)") + ggtitle("Fitting two straight lines:")
#+END_SRC

#+RESULTS[(2022-07-14 09:26:14) 9b945931b1ae08c6c59908bad371047b0bcb43ca]:
[[file:./figures/fig-log-hazards-log-time-hazard2-changepoint.png]]



#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard2-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t1.1*log(lambda.status2.t1.1) + gamma.status2.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t1.0*log(lambda.status2.t1.0) + gamma.status2.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.1*log(lambda.status2.t2.1) + gamma.status2.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.0*log(lambda.status2.t2.0) + gamma.status2.t2.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 2"]) +  
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.3),
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:")
#+END_SRC

#+RESULTS[(2022-07-14 09:28:37) ca297a1493a62eee2084abb42f17f9dab39c362b]:
[[file:./figures/fig-hazards-time-hazard2-changepoint.png]]


*** Censoring events (covariate dependent)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard0-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
log.t0.0 <- 1.2
log.t1.0 <- 1.9   
log.t2.0 <- 3.2

kmin.0.t1.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t0.0])
kmax.0.t1.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t1.0])
kmin.0.t1.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t0.0])
kmax.0.t1.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t1.0])

kmin.0.t2.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t1.0])
kmax.0.t2.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t2.0])
kmin.0.t2.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t1.0])
kmax.0.t2.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t2.0])

#plot(log(bhazs[chaz0>0 & chemo==1][["time"]])[kmin.0.t1.1:kmax.0.t1.1],log(bhazs[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t1.1:kmax.0.t1.1]))
fit.status0.t1.1 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==1][kmin.0.t1.1:kmax.0.t1.1])
#abline(a = coef(fit.status0.t1.1)[1], b = coef(fit.status0.t1.1)[2], col = "red")
(gamma.status0.t1.1 <- coef(fit.status0.t1.1)[2])
(lambda.status0.t1.1 <- exp(coef(fit.status0.t1.1)[1]/gamma.status0.t1.1))
#plot(log(bhazs[chaz0>0 & chemo==0][["time"]])[kmin.0.t1.0:kmax.0.t1.0],log(bhazs[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t1.0:kmax.0.t1.0]))
fit.status0.t1.0 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==0][kmin.0.t1.0:kmax.0.t1.0])
#abline(a = coef(fit.status0.t1.0)[1], b = coef(fit.status0.t1.0)[2], col = "red")
(gamma.status0.t1.0 <- coef(fit.status0.t1.0)[2])
(lambda.status0.t1.0 <- exp(coef(fit.status0.t1.0)[1]/gamma.status0.t1.0))

# plot(log(bhazs[chaz0>0 & chemo==1][["time"]])[kmin.0.t2.1:kmax.0.t2.1],log(bhazs[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t2.1:kmax.0.t2.1]))
fit.status0.t2.1 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==1][kmin.0.t2.1:kmax.0.t2.1])
#abline(a = coef(fit.status0.t2.1)[1], b = coef(fit.status0.t2.1)[2], col = "red")
(gamma.status0.t2.1 <- coef(fit.status0.t2.1)[2])
(lambda.status0.t2.1 <- exp(coef(fit.status0.t2.1)[1]/gamma.status0.t2.1))
#plot(log(bhazs[chaz0>0 & chemo==0][["time"]])[kmin.0.t2.0:kmax.0.t2.0],log(bhazs[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t2.0:kmax.0.t2.0]))
fit.status0.t2.0 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==0][kmin.0.t2.0:kmax.0.t2.0])
#abline(a = coef(fit.status0.t2.0)[1], b = coef(fit.status0.t2.0)[2], col = "red")
(gamma.status0.t2.0 <- coef(fit.status0.t2.0)[2])
(lambda.status0.t2.0 <- exp(coef(fit.status0.t2.0)[1]/gamma.status0.t2.0))

bhazs.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t1.1*log(lambda.status0.t1.1) + gamma.status0.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t1.0*log(lambda.status0.t1.0) + gamma.status0.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t2.1*log(lambda.status0.t2.1) + gamma.status0.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t2.0*log(lambda.status0.t2.0) + gamma.status0.t2.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.background = element_blank())+ 
  ylab("log(chaz)") + ggtitle("Fitting two straight lines:")
#+END_SRC

#+RESULTS[(2022-07-14 09:37:19) 21dc78341ea5c4304554f51c00038a91786c1701]:
[[file:./figures/fig-log-hazards-log-time-hazard0-changepoint.png]]



#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard0-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0", 
           fit.chaz:=exp(gamma.status0.t1.1*log(lambda.status0.t1.1) + gamma.status0.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t1.0*log(lambda.status0.t1.0) + gamma.status0.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t2.1*log(lambda.status0.t2.1) + gamma.status0.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t2.0*log(lambda.status0.t2.0) + gamma.status0.t2.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 0"]) + 
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.3), 
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:")
#+END_SRC

#+RESULTS[(2022-07-14 09:28:20) 6ab90d379afb8ce58c7650439647a343ecbe701d]:
[[file:./figures/fig-hazards-time-hazard0-changepoint.png]]


*** Censoring events (independent)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard0-independent.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.uninformative.cens <- bhaz.uninformative.cens[[1]]
bhazs.uninformative.cens[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"] 

bhazs.uninformative.cens.long <- melt(bhazs.uninformative.cens, id.vars=c("chemo", "time")) 
bhazs.uninformative.cens.long[, variable2:=substr(variable,1,4)] 
bhazs.uninformative.cens.long <- bhazs.uninformative.cens.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.uninformative.cens.long[, chemo:=paste0("chemo = ", chemo)]

log.t0.0 <- 1
log.t1.0 <- 3  

kmin.0.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t0.0])
kmax.0.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t1.0])
kmin.0.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t0.0])
kmax.0.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t1.0])

#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.1:kmax.0.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.1:kmax.0.1]))
fit.status0.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.1:kmax.0.1])
#abline(a = coef(fit.status0.1)[1], b = coef(fit.status0.1)[2], col = "red")
gamma.status0.1 <- coef(fit.status0.1)[2]
lambda.status0.1 <- exp(coef(fit.status0.1)[1]/gamma.status0.1)
#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.0:kmax.0.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.0:kmax.0.0]))
fit.status0.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.0:kmax.0.0])
#abline(a = coef(fit.status0.0)[1], b = coef(fit.status0.0)[2], col = "red")
gamma.status0.0 <- coef(fit.status0.0)[2]
lambda.status0.0 <- exp(coef(fit.status0.0)[1]/gamma.status0.0)

bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t0.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.1*log(lambda.status0.1) + gamma.status0.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.0*log(lambda.status0.0) + gamma.status0.0*log(time))]

ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.background = element_blank())+ 
  ylab("log(chaz)") + ggtitle("Fitting a single straight line:")
#+END_SRC

#+RESULTS[(2022-07-14 09:38:57) 03bed854484d953d2fe2ab9908ddd5bed5ec0262]:
[[file:./figures/fig-log-hazards-log-time-hazard0-independent.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard0-independent.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.uninformative.cens.long[chemo=="chemo = 1" & status=="status = 0", 
           fit.chaz:=exp(gamma.status0.1*log(lambda.status0.1) + gamma.status0.1*log(time))]
bhazs.uninformative.cens.long[chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.0*log(lambda.status0.0) + gamma.status0.0*log(time))]

ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + 
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.1), 
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:")
#+END_SRC

#+RESULTS[(2022-07-14 09:43:02) 2dfbe2c83ff7af8114d3e57f1b5786167fb4c729]:
[[file:./figures/fig-hazards-time-hazard0-independent.png]]


*** Censoring events (independent, but with changepoint)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard0-independent-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.uninformative.cens <- bhaz.uninformative.cens[[1]]
bhazs.uninformative.cens[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"] 

bhazs.uninformative.cens.long <- melt(bhazs.uninformative.cens, id.vars=c("chemo", "time")) 
bhazs.uninformative.cens.long[, variable2:=substr(variable,1,4)] 
bhazs.uninformative.cens.long <- bhazs.uninformative.cens.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.uninformative.cens.long[, chemo:=paste0("chemo = ", chemo)]

log.t0.0 <- 1.2
log.t1.0 <- 1.9   
log.t2.0 <- 3.5

kmin.0.t1.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t0.0])
kmax.0.t1.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t1.0])
kmin.0.t1.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t0.0])
kmax.0.t1.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t1.0])

kmin.0.t2.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t1.0])
kmax.0.t2.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t2.0])
kmin.0.t2.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t1.0])
kmax.0.t2.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t2.0])

kmin.0.t2.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t2.0])
kmax.0.t2.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t3.0])
kmin.0.t2.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t2.0])
kmax.0.t2.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t3.0])

#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.t1.1:kmax.0.t1.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t1.1:kmax.0.t1.1]))
fit.status0.t1.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.t1.1:kmax.0.t1.1])
#abline(a = coef(fit.status0.t1.1)[1], b = coef(fit.status0.t1.1)[2], col = "red")
(gamma.status0.t1.1 <- coef(fit.status0.t1.1)[2])
(lambda.status0.t1.1 <- exp(coef(fit.status0.t1.1)[1]/gamma.status0.t1.1))
#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.t1.0:kmax.0.t1.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t1.0:kmax.0.t1.0]))
fit.status0.t1.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.t1.0:kmax.0.t1.0])
#abline(a = coef(fit.status0.t1.0)[1], b = coef(fit.status0.t1.0)[2], col = "red")
(gamma.status0.t1.0 <- coef(fit.status0.t1.0)[2])
(lambda.status0.t1.0 <- exp(coef(fit.status0.t1.0)[1]/gamma.status0.t1.0))

# plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.t2.1:kmax.0.t2.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t2.1:kmax.0.t2.1]))
fit.status0.t2.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.t2.1:kmax.0.t2.1])
#abline(a = coef(fit.status0.t2.1)[1], b = coef(fit.status0.t2.1)[2], col = "red")
(gamma.status0.t2.1 <- coef(fit.status0.t2.1)[2])
(lambda.status0.t2.1 <- exp(coef(fit.status0.t2.1)[1]/gamma.status0.t2.1))
#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.t2.0:kmax.0.t2.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t2.0:kmax.0.t2.0]))
fit.status0.t2.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.t2.0:kmax.0.t2.0])
#abline(a = coef(fit.status0.t2.0)[1], b = coef(fit.status0.t2.0)[2], col = "red")
(gamma.status0.t2.0 <- coef(fit.status0.t2.0)[2])

(lambda.status0.t2.0 <- exp(coef(fit.status0.t2.0)[1]/gamma.status0.t2.0))

bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t1.1*log(lambda.status0.t1.1) + gamma.status0.t1.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t1.0*log(lambda.status0.t1.0) + gamma.status0.t1.0*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t2.1*log(lambda.status0.t2.1) + gamma.status0.t2.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t2.0*log(lambda.status0.t2.0) + gamma.status0.t2.0*log(time))]

ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.background = element_blank())+ 
  ylab("log(chaz)") + ggtitle("Fitting two straight lines:")
#+END_SRC

#+RESULTS[(2022-07-14 09:46:42) 5240ca63a4254397ba657861b612d8641b70678b]:
[[file:./figures/fig-log-hazards-log-time-hazard0-independent-changepoint.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard0-independent-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.uninformative.cens.long[time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0", 
           fit.chaz:=exp(gamma.status0.t1.1*log(lambda.status0.t1.1) + gamma.status0.t1.1*log(time))]
bhazs.uninformative.cens.long[time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t1.0*log(lambda.status0.t1.0) + gamma.status0.t1.0*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t2.1*log(lambda.status0.t2.1) + gamma.status0.t2.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t2.0*log(lambda.status0.t2.0) + gamma.status0.t2.0*log(time))]
 
ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + 
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.1), 
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:")
#+END_SRC

#+RESULTS[(2022-07-14 09:46:14) 9925c2c08119699071e3545479022c4219e2b845]:
[[file:./figures/fig-hazards-time-hazard0-independent-changepoint.png]]



*** Censoring events (independent, but with two changepoints)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard0-independent-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
    bhazs.uninformative.cens <- bhaz.uninformative.cens[[1]]
    bhazs.uninformative.cens[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"] 

    bhazs.uninformative.cens.long <- melt(bhazs.uninformative.cens, id.vars=c("chemo", "time")) 
    bhazs.uninformative.cens.long[, variable2:=substr(variable,1,4)] 
    bhazs.uninformative.cens.long <- bhazs.uninformative.cens.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
    bhazs.uninformative.cens.long[, chemo:=paste0("chemo = ", chemo)]

    log.t0.0 <- 1.2
    log.t1.0 <- 1.9   
    log.t2.0 <- 3.2
    log.t3.0 <- 3.5

    kmin.0.t1.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t0.0])
    kmax.0.t1.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t1.0])
    kmin.0.t1.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t0.0])
    kmax.0.t1.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t1.0])

    kmin.0.t2.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t1.0])
    kmax.0.t2.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t2.0])
    kmin.0.t2.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t1.0])
    kmax.0.t2.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t2.0])

    kmin.0.t3.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t2.0])
    kmax.0.t3.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t3.0])
    kmin.0.t3.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t2.0])
    kmax.0.t3.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t3.0])
    
    #plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.t1.1:kmax.0.t1.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t1.1:kmax.0.t1.1]))
    fit.status0.t1.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.t1.1:kmax.0.t1.1])
    #abline(a = coef(fit.status0.t1.1)[1], b = coef(fit.status0.t1.1)[2], col = "red")
    (gamma.status0.t1.1 <- coef(fit.status0.t1.1)[2])
    (lambda.status0.t1.1 <- exp(coef(fit.status0.t1.1)[1]/gamma.status0.t1.1))
    #plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.t1.0:kmax.0.t1.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t1.0:kmax.0.t1.0]))
    fit.status0.t1.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.t1.0:kmax.0.t1.0])
    #abline(a = coef(fit.status0.t1.0)[1], b = coef(fit.status0.t1.0)[2], col = "red")
    (gamma.status0.t1.0 <- coef(fit.status0.t1.0)[2])
    (lambda.status0.t1.0 <- exp(coef(fit.status0.t1.0)[1]/gamma.status0.t1.0))

    # plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.t2.1:kmax.0.t2.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t2.1:kmax.0.t2.1]))
    fit.status0.t2.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.t2.1:kmax.0.t2.1])
    #abline(a = coef(fit.status0.t2.1)[1], b = coef(fit.status0.t2.1)[2], col = "red")
    (gamma.status0.t2.1 <- coef(fit.status0.t2.1)[2])
    (lambda.status0.t2.1 <- exp(coef(fit.status0.t2.1)[1]/gamma.status0.t2.1))
    #plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.t2.0:kmax.0.t2.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t2.0:kmax.0.t2.0]))
    fit.status0.t2.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.t2.0:kmax.0.t2.0])
    #abline(a = coef(fit.status0.t2.0)[1], b = coef(fit.status0.t2.0)[2], col = "red")
    (gamma.status0.t2.0 <- coef(fit.status0.t2.0)[2])
    (lambda.status0.t2.0 <- exp(coef(fit.status0.t2.0)[1]/gamma.status0.t2.0))

    # plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.t3.1:kmax.0.t3.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t3.1:kmax.0.t3.1]))
    fit.status0.t3.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.t3.1:kmax.0.t3.1])
    #abline(a = coef(fit.status0.t3.1)[1], b = coef(fit.status0.t3.1)[2], col = "red")
    (gamma.status0.t3.1 <- coef(fit.status0.t3.1)[2])
    (lambda.status0.t3.1 <- exp(coef(fit.status0.t3.1)[1]/gamma.status0.t3.1))
    #plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.t3.0:kmax.0.t3.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t3.0:kmax.0.t3.0]))
    fit.status0.t3.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.t3.0:kmax.0.t3.0])
    #abline(a = coef(fit.status0.t3.0)[1], b = coef(fit.status0.t3.0)[2], col = "red")
    (gamma.status0.t3.0 <- coef(fit.status0.t3.0)[2])
    (lambda.status0.t3.0 <- exp(coef(fit.status0.t3.0)[1]/gamma.status0.t3.0))


    bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",
                                  fit.chaz:=exp(gamma.status0.t1.1*log(lambda.status0.t1.1) + gamma.status0.t1.1*log(time))]
    bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                                  fit.chaz:=exp(gamma.status0.t1.0*log(lambda.status0.t1.0) + gamma.status0.t1.0*log(time))]
    bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                                  fit.chaz:=exp(gamma.status0.t2.1*log(lambda.status0.t2.1) + gamma.status0.t2.1*log(time))]
    bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                                  fit.chaz:=exp(gamma.status0.t2.0*log(lambda.status0.t2.0) + gamma.status0.t2.0*log(time))]
    bhazs.uninformative.cens.long[time>=exp(log.t2.0) & time<=exp(log.t3.0) & chemo=="chemo = 1" & status=="status = 0",
                                  fit.chaz:=exp(gamma.status0.t3.1*log(lambda.status0.t3.1) + gamma.status0.t3.1*log(time))]
    bhazs.uninformative.cens.long[time>=exp(log.t2.0) & time<=exp(log.t3.0) & chemo=="chemo = 0" & status=="status = 0",
                                  fit.chaz:=exp(gamma.status0.t3.0*log(lambda.status0.t3.0) + gamma.status0.t3.0*log(time))]
    
    ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
        geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
        facet_grid(chemo~status, scales="free")+theme_bw()+
        theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
              strip.text = element_text(size=16),
              plot.title = element_text(size = 16, hjust = -0.15),
              strip.background = element_blank())+ 
        ylab("log(chaz)") + ggtitle("Fitting three straight lines:")
#+END_SRC

#+RESULTS[(2022-07-14 10:24:37) 2e25aedec7708b78b4ee0c4425436adec9adc789]:
[[file:./figures/fig-log-hazards-log-time-hazard0-independent-2changepoints.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard0-independent-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
    bhazs.uninformative.cens.long[time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0", 
                                  fit.chaz:=exp(gamma.status0.t1.1*log(lambda.status0.t1.1) + gamma.status0.t1.1*log(time))]
    bhazs.uninformative.cens.long[time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                                  fit.chaz:=exp(gamma.status0.t1.0*log(lambda.status0.t1.0) + gamma.status0.t1.0*log(time))]
    bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time <= exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                                  fit.chaz:=exp(gamma.status0.t2.1*log(lambda.status0.t2.1) + gamma.status0.t2.1*log(time))]
    bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time <= exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                                  fit.chaz:=exp(gamma.status0.t2.0*log(lambda.status0.t2.0) + gamma.status0.t2.0*log(time))]
    bhazs.uninformative.cens.long[time>=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                                  fit.chaz:=exp(gamma.status0.t3.1*log(lambda.status0.t3.1) + gamma.status0.t3.1*log(time))]
    bhazs.uninformative.cens.long[time>=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                                  fit.chaz:=exp(gamma.status0.t3.0*log(lambda.status0.t3.0) + gamma.status0.t3.0*log(time))]
 
    ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + 
        geom_point(aes(x=time, y=value)) +
        geom_line(aes(time, y=fit.chaz), col="red")+
        facet_grid(chemo~status, scales="free")+theme_bw()+
        theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
              strip.text = element_text(size=16),
              plot.title = element_text(size = 16, hjust = -0.1), 
              strip.background = element_blank())+
        ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:")
#+END_SRC

#+RESULTS[(2022-07-14 10:25:08) af384bb70af7984f4ed02fba800323daf90f4f6f]:
[[file:./figures/fig-hazards-time-hazard0-independent-2changepoints.png]]




** Simulating data 


#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports none  :session *R* :cache yes
#######################################################################################

#--- function to simulate from Weibull (change-point!) 
#

simulate.change.weibull <- function(seed = 100,
                                    follic.sim = follic, #sim.sample = nrow(follic),
                                    change.weibull.parameters = list(
                                        nu.A1.t1 = gamma.status1.t1.1,
                                        nu.A1.t2 = gamma.status1.t2.1,
                                        nu.A0.t1 = gamma.status1.t1.0,
                                        nu.A0.t2 = gamma.status1.t2.0,
                                        eta.A1.t1 = lambda.status1.t1.1^gamma.status1.t1.1,
                                        eta.A1.t2 = lambda.status1.t2.1^gamma.status1.t2.1,
                                        eta.A0.t1 = lambda.status1.t1.0^gamma.status1.t1.0,
                                        eta.A0.t2 = lambda.status1.t2.0^gamma.status1.t2.0
                                    ),
                                    t0 = log(bhazs[chaz1>0 & chemo==0][["time"]])[kmax.1.t1.0],
                                    counterfactual = NULL,
                                    observed.covars = TRUE,
                                    fit.cox = bhaz.sl[["1"]]) {

    set.seed(seed)

    if (length(names(coef(fit.cox)))>0) {
        exp.covar <- follic.sim[, exp(rowSums(sapply(names(coef(fit.cox))[names(coef(fit.cox)) != "chemo" & sapply(names(coef(fit.cox)), function(name) length(grep("period", name)) == 0)], function(covar) {
            coef(fit.cox)[covar]*follic.sim[[covar]]
        })))]
    } else {
        exp.covar <- exp(0)
    }

    Lambda.inv <- function(u, t, nu, eta, nu2=nu, eta2=eta) {
        return( rowSums(cbind((u <= (eta*exp.covar)*t0^{nu}) *
                              (( (u + eta*exp.covar*t^{nu}) /
                                 (eta*exp.covar) )^{1/nu} - t),
        (u > (eta*exp.covar)*t0^{nu}) *
        (( (u - (eta2*exp.covar)*t0^{nu2} +
            eta2*exp.covar*t0^{nu2}) /
           (eta2*exp.covar) )^{1/nu2} - t)), na.rm=TRUE) )
    }

    U <- -log(runif(nrow(follic.sim)))

    Tout.A1 <- Lambda.inv(U, 0,
                          nu = change.weibull.parameters[["nu.A1.t1"]],
                          eta = change.weibull.parameters[["eta.A1.t1"]],
                          nu2 = change.weibull.parameters[["nu.A1.t2"]],
                          eta2 = change.weibull.parameters[["eta.A1.t2"]])

    Tout.A0 <- Lambda.inv(U, 0,
                          nu = change.weibull.parameters[["nu.A0.t1"]],
                          eta = change.weibull.parameters[["eta.A0.t1"]],
                          nu2 = change.weibull.parameters[["nu.A0.t2"]],
                          eta2 = change.weibull.parameters[["eta.A0.t2"]])

    if (length(counterfactual) == 0) {
        return(Tout <- follic.sim[["chemo"]]*Tout.A1 + (1-follic.sim[["chemo"]])*Tout.A0)
    } else if (counterfactual == 1) {
        return(Tout.A1) 
    } else {
        return(Tout.A0) 
    }
}

simulate.follic <- function(observed.covars = TRUE,
                            sim.sample = nrow(follic),
                            counterfactual = NULL,
                            seed = 100,
                            informative.censoring = TRUE,
                            keep.times = FALSE) {

    set.seed(seed)

    if (observed.covars) {
        if (length(sim.sample)>0) {
            follic.sim <- follic[sample(1:nrow(follic), sim.sample, replace=TRUE)]
        } else {
            follic.sim <- follic
        }
    } else {
        follic.sim <- data.table(stage = rbinom(sim.sample, 1, p.stage),
                                 chemo = rbinom(sim.sample, 1, p.chemo),
                                 age = rnorm(sim.sample, p.age[[1]][["mean"]], p.age[[1]][["sd"]]),
                                 hgb = rnorm(sim.sample, p.hgb[[1]][["mean"]], p.hgb[[1]][["sd"]]))
    }

    if (informative.censoring) {
        T0 <- simulate.change.weibull(follic.sim = follic.sim,
                                      seed = seed*1010,
                                      change.weibull.parameters = list(
                                          nu.A1.t1 = gamma.status0.t1.1,
                                          nu.A1.t2 = gamma.status0.t2.1,
                                          nu.A0.t1 = gamma.status0.t1.0,
                                          nu.A0.t2 = gamma.status0.t2.0,
                                          eta.A1.t1 = lambda.status0.t1.1^gamma.status0.t1.1,
                                          eta.A1.t2 = lambda.status0.t2.1^gamma.status0.t2.1,
                                          eta.A0.t1 = lambda.status0.t1.0^gamma.status0.t1.0,
                                          eta.A0.t2 = lambda.status0.t2.0^gamma.status0.t2.0
                                      ),
                                      counterfactual = counterfactual,
                                      t0 = (bhazs[chaz0>0 & chemo==0][["time"]])[kmax.0.t1.0], 
                                      fit.cox = bhaz.sl[["0"]])
    } else {
        T0 <- simulate.change.weibull(follic.sim = follic.sim,
                                      seed = seed*1010,
                                      change.weibull.parameters = list(
                                          nu.A1.t1 = gamma.status0.1,
                                          nu.A1.t2 = gamma.status0.1,
                                          nu.A0.t1 = gamma.status0.0,
                                          nu.A0.t2 = gamma.status0.0,
                                          eta.A1.t1 = lambda.status0.1^gamma.status0.1,
                                          eta.A1.t2 = lambda.status0.1^gamma.status0.1,
                                          eta.A0.t1 = lambda.status0.0^gamma.status0.0,
                                          eta.A0.t2 = lambda.status0.0^gamma.status0.0
                                      ),
                                      counterfactual = counterfactual,
                                      t0 = (bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmax.0.t1.0], 
                                      fit.cox = bhaz.uninformative.cens[["0"]])
    }

    T1 <- simulate.change.weibull(follic.sim = follic.sim,
                                  seed = seed*9010,
                                  change.weibull.parameters = list(
                                      nu.A1.t1 = gamma.status1.t1.1,
                                      nu.A1.t2 = gamma.status1.t2.1,
                                      nu.A0.t1 = gamma.status1.t1.0,
                                      nu.A0.t2 = gamma.status1.t2.0,
                                      eta.A1.t1 = lambda.status1.t1.1^gamma.status1.t1.1,
                                      eta.A1.t2 = lambda.status1.t2.1^gamma.status1.t2.1,
                                      eta.A0.t1 = lambda.status1.t1.0^gamma.status1.t1.0,
                                      eta.A0.t2 = lambda.status1.t2.0^gamma.status1.t2.0
                                  ),
                                  counterfactual = counterfactual,
                                  t0 = (bhazs[chaz1>0 & chemo==0][["time"]])[kmax.1.t1.0], 
                                  fit.cox = bhaz.sl[["1"]])

    T2 <- simulate.change.weibull(follic.sim = follic.sim,
                                  seed = seed*5010,
                                  change.weibull.parameters = list(
                                      nu.A1.t1 = gamma.status2.t1.1,
                                      nu.A1.t2 = gamma.status2.t2.1,
                                      nu.A0.t1 = gamma.status2.t1.0,
                                      nu.A0.t2 = gamma.status2.t2.0,
                                      eta.A1.t1 = lambda.status2.t1.1^gamma.status2.t1.1,
                                      eta.A1.t2 = lambda.status2.t2.1^gamma.status2.t2.1,
                                      eta.A0.t1 = lambda.status2.t1.0^gamma.status2.t1.0,
                                      eta.A0.t2 = lambda.status2.t2.0^gamma.status2.t2.0
                                  ),
                                  counterfactual = counterfactual,
                                  t0 = (bhazs[chaz2>0 & chemo==0][["time"]])[kmax.2.t1.0], 
                                  fit.cox = bhaz.sl[["2"]])

    if (length(counterfactual)>0) {
        follic.sim[, time := apply(cbind(T1, T2), 1, min)]
    } else {
        follic.sim[, time := apply(cbind(T1, T2, T0), 1, min)]
    }

    follic.sim[, status := 1*(time == T1) + 2*(time == T2)]

    return(follic.sim)
}
#+END_SRC

