* Web appendix

This is the web appendix to our manuscript entitled /Estimation of/
/time-specific intervention effects on continuously distributed/
/time-to-event outcomes by targeted maximum likelihood estimation/. We
include here (extra) simulation results, sample code and plots of
estimated baseline hazards used in our simulation study.

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports none  :session *R* :cache yes  
setwd("~/research/TMLE-from-2020june/survival-baseline/Web-appendix-iterative-competing-risks-tmle")
#+END_SRC

** Overview

Data:
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#data-example][Follic data example]]

Simulation results: 
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#simulation-results][All results]]
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#varying-the-sample-size][Varying the sample size]]
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#sensitivity-to-hyperparameter-selection-HAL][Sensitivity to hyperparameter selection (HAL)]]
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#more-results-for-survtmle][Extra results for survtmle (varying grid)]]

Sample code:
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#sample-code][Sample code]]

Analysis of follic data:
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#follic-analysis][Code]]
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#follic-data-results][Results]]

Fitting baseline hazard by Weibull distributions with parameters
changing over time:

- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#cause-one-events-three-changepoints][Final fitted cause-one specific baseline hazard]]
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#cause-two-events-add-changepoint][Final fitted cause-two specific baseline hazard]]
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#censoring-events-covariate-dependent-add-changepoint][Final fitted covariate dependent censoring baseline hazard]]
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#censoring-events-independent-but-with-two-changepoints][Final fitted covariate independent censoring baseline hazard]]

** Load packages and functions

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes  
library(data.table) 
library(zoo)
library(glmnet)
library(survival)
library(stringr) 
library(ggplot2)  
library(ltmle)
library(nleqslv)
library(parallel)
library(foreach) 
library(doParallel)
library(prodlim)
library(gridExtra)
library(survival)
library(riskRegression)
library(Matrix)
library(hdnom)
library(MASS)
library(xtable)
library(timereg)
library(cmprsk)
library(randomForestSRC)
#+END_SRC    

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes  
source("./R/sim.data.continuous.R") 
source("./R/contmle.R") 
source("./R/cox.loss.fun.R") 
source("./R/lebesgue.loss.fun.R") 
source("./R/cv.fun.R")     
source("./R/basis.fun.R")
source("./R/hal.screening.R") 
source("./R/fit.hal.R")    
source("./R/cox.sl.R")   
source("./R/fit.categorical.R")
source("./R/predict.catfit.R") 
#+END_SRC    


** Data simulation functions

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes  
source("./simulation/estimate.weibulls.R")
source("./simulation/follic.simulation.functions.R") 
source("./simulation/follic.run.fun.R")
source("./simulation/follic.output.fun.R")
#+END_SRC    

** Data example

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes  
data(follic, package="randomForestSRC")
follic <- data.table(follic)  
 
#-- convert variables:  
follic[, stage:=as.numeric(clinstg==2)] 
follic[, chemo:=as.numeric(ch=="Y")]
follic <- follic[, -c("clinstg", "ch"), with=FALSE]
#+END_SRC    


Events: 
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output :exports code  :session *R* :cache yes  
follic[, table(status)]      
#+END_SRC    

#+RESULTS[(2022-08-31 12:53:04) 88fc3657cf5fa0cff89da053ca883d14e7dd82a8]:
: status
:   0   1   2 
: 193 272  76

Distribution of observed time to event: 
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output :exports code  :session *R* :cache yes  
follic[, summary(time)]     
#+END_SRC    

#+RESULTS[(2022-08-31 12:53:07) ad780417e3b08cee0a116beb304862bb5e35e479]:
:      Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
:  0.002738  1.919233  5.464750  7.393791 10.850103 31.101985

Events before time-horizon of interest:
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output :exports code  :session *R* :cache yes  
follic[time<=10, table(status)]      
#+END_SRC    

#+RESULTS[(2022-08-31 12:53:09) b7a72a3a5c8a0d178dad0ba90fd7c9df68a52ec3]:
: status
:   0   1   2 
:  95 251  46

[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#web-appendix][Back to top]]

** Simulation results


#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports none  :session *R* :cache yes
sim.sample <- 2000
tmle.results <- do.call("rbind", lapply(c(nrow(follic), 1000, 2000), function(sim.sample) {
  contmle.results <- do.call("rbind", lapply(list("Randomized treatment + independent censoring", "Informative censoring"), function(outer.which) {
    out.inner <- data.table(do.call("rbind", lapply(list("hal", "cox", "rf"), function(inner.initial) {
      try(unlist(follic.output.fun(M = 500, 
                                   randomized.treatment = outer.which == "Randomized treatment + independent censoring",
                                   observed.treatment = outer.which != "Randomized treatment + independent censoring",
                                   informative.censoring = outer.which != "Randomized treatment + independent censoring",
                                   observed.covars = TRUE,
                                   fit.initial = inner.initial,
                                   sim.sample = sim.sample)))
    })))
    out.inner[, initial := c("HAL+TMLE", "Cox+TMLE", "RF+TMLE")][, setting := outer.which]
    return(out.inner[substr(bias.tmle, 1, 5) != "Error"])
  }))

  contmle.results <- rbind(contmle.results, do.call("rbind", lapply(unique(contmle.results[["setting"]]), function(which) {
    contmle.results[setting == which & tolower(substr(initial,1,3)) == "hal"][, initial := "KM"][, bias.tmle := bias.km][, se.tmle := se.km][, sd.tmle := sd.km][, mse.tmle := mse.km]
  })))

  survtmle.results <- do.call("rbind", lapply(list("Randomized treatment + independent censoring", "Informative censoring"), function(outer.which) {
    do.call("rbind", lapply(list((0:10)*4, (0:20)*2, (0:40), (0:80)/2), function(inner.grid) {
      out.inner <- data.table(do.call("rbind", lapply(list("glm", "sl"), function(inner.sl) {
        try(unlist(follic.output.survtmle(M = 500,
                                          randomized.treatment = outer.which == "Randomized treatment + independent censoring",
                                          observed.treatment = outer.which != "Randomized treatment + independent censoring",
                                          informative.censoring = outer.which != "Randomized treatment + independent censoring",
                                          observed.covars = TRUE,
                                          sl.survtmle = inner.sl == "sl", 
                                          grid.survtmle = inner.grid, 
                                          sim.sample = sim.sample)))
      })))
      out.inner[, initial := c("GLM", "SL")][, grid.length.used := length(inner.grid)][, setting := outer.which]
      return(out.inner[substr(bias.survtmle, 1, 5) != "Error"])
    }))
  }))

  survtmle.results.fixed.grid <- survtmle.results[grid.length.used == 41]
  survtmle.results.fixed.grid[, initial := paste0("survtmle (", initial, ")")]
  names(survtmle.results.fixed.grid) <- gsub("surv", "", names(survtmle.results.fixed.grid))
  tmle.results <- rbind(contmle.results, survtmle.results.fixed.grid, fill = TRUE)
  tmle.results[, mse.km := na.locf(mse.km), by = setting]
  tmle.results[initial == "KM", initial := "Aalen-Johansen"]
  tmle.results[, sample.size:=sim.sample] 
}))
#+END_SRC


#+BEGIN_SRC R :results file graphics :file ./simulation/output/simultation-results-n2000.png :exports none :session *R* :cache yes :height 1500 :width 500
sim.sample <- 2000  
grid.arrange(ggplot(tmle.results[sample.size==sim.sample]) + theme_bw() + 
             geom_point(aes(x = initial, y = as.numeric(bias.tmle), shape = as.factor(sample.size))) +
             scale_shape_manual("sample size", values=c(4, 8, 9)) + 
             facet_grid(. ~ setting) + 
             geom_hline(yintercept = 0, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("bias") + xlab("") +
             theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
                   strip.text = element_text(size = 10), 
                   strip.background = element_blank()),
             ggplot(tmle.results[sample.size==sim.sample]) + theme_bw() +
             geom_point(aes(x = initial, y = as.numeric(cov.tmle), shape = as.factor(sample.size))) +
             scale_shape_manual("sample size", values=c(4, 8, 9)) + 
             facet_grid(. ~ setting) +
             geom_hline(yintercept = 0.95, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("coverage") + xlab("") +
             theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
                   strip.text = element_text(size = 10),
                   strip.background = element_blank()),
             ggplot(tmle.results[sample.size==sim.sample]) + theme_bw() +
             geom_point(aes(x = initial, y = as.numeric(sd.tmle)/as.numeric(se.tmle), shape = as.factor(sample.size))) +
             scale_shape_manual("sample size", values=c(4, 8, 9)) + 
             facet_grid(. ~ setting) +
             geom_hline(yintercept = 1, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("SD/SE") + xlab("") +
             theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
                   strip.text = element_text(size = 10),
                   strip.background = element_blank()),
             ggplot(tmle.results[sample.size==sim.sample]) + theme_bw() + 
             geom_point(aes(x = initial, y = as.numeric(mse.tmle)/as.numeric(mse.km), shape = as.factor(sample.size))) +
             scale_shape_manual("sample size", values=c(4, 8, 9)) + 
             facet_grid(. ~ setting) +
             geom_hline(yintercept = 1, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("MSE/MSE(KM)") + xlab("") +
             theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
                   strip.text = element_text(size = 10),  
                   strip.background = element_blank()),
             ncol=1)
#+END_SRC

#+RESULTS[(2022-08-31 13:52:44) ad0adfc035c4df3d0f1de056f554ecd8cac41087]:
[[file:./simulation/output/simultation-results-n2000.png]]


[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#web-appendix][Back to top]]

** Varying the sample size

#+BEGIN_SRC R :results file graphics :file ./simulation/output/simultation-results-n1000.png :exports none :session *R* :cache yes :height 1500 :width 500
sim.sample <- 1000   
grid.arrange(ggplot(tmle.results[sample.size==sim.sample]) + theme_bw() + 
             geom_point(aes(x = initial, y = as.numeric(bias.tmle), shape = as.factor(sample.size))) +
             scale_shape_manual("sample size", values=c(4, 8, 9)) + 
             facet_grid(. ~ setting) + 
             geom_hline(yintercept = 0, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("bias") + xlab("") +
             theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
                   strip.text = element_text(size = 10), 
                   strip.background = element_blank()),
             ggplot(tmle.results[sample.size==sim.sample]) + theme_bw() +
             geom_point(aes(x = initial, y = as.numeric(cov.tmle), shape = as.factor(sample.size))) +
             scale_shape_manual("sample size", values=c(4, 8, 9)) + 
             facet_grid(. ~ setting) +
             geom_hline(yintercept = 0.95, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("coverage") + xlab("") +
             theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
                   strip.text = element_text(size = 10),
                   strip.background = element_blank()),
             ggplot(tmle.results[sample.size==sim.sample]) + theme_bw() +
             geom_point(aes(x = initial, y = as.numeric(sd.tmle)/as.numeric(se.tmle), shape = as.factor(sample.size))) +
             scale_shape_manual("sample size", values=c(4, 8, 9)) + 
             facet_grid(. ~ setting) +
             geom_hline(yintercept = 1, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("SD/SE") + xlab("") +
             theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
                   strip.text = element_text(size = 10),
                   strip.background = element_blank()),
             ggplot(tmle.results[sample.size==sim.sample]) + theme_bw() + 
             geom_point(aes(x = initial, y = as.numeric(mse.tmle)/as.numeric(mse.km), shape = as.factor(sample.size))) +
             scale_shape_manual("sample size", values=c(4, 8, 9)) + 
             facet_grid(. ~ setting) +
             geom_hline(yintercept = 1, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("MSE/MSE(KM)") + xlab("") +
             theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
                   strip.text = element_text(size = 10),  
                   strip.background = element_blank()),
             ncol=1)
#+END_SRC

#+RESULTS[(2022-08-31 13:53:01) 4cfa95b13970bbe8998b4555e55e0cd1371b4fc1]:
[[file:./simulation/output/simultation-results-n1000.png]]


[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#web-appendix][Back to top]]

#+BEGIN_SRC R :results file graphics :file ./simulation/output/simultation-results-nfollic.png :exports none :session *R* :cache yes :height 1500 :width 500
sim.sample <- nrow(follic)   
grid.arrange(ggplot(tmle.results[sample.size==sim.sample]) + theme_bw() + 
             geom_point(aes(x = initial, y = as.numeric(bias.tmle), shape = as.factor(sample.size))) +
             scale_shape_manual("sample size", values=c(4, 8, 9)) + 
             facet_grid(. ~ setting) + 
             geom_hline(yintercept = 0, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("bias") + xlab("") +
             theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
                   strip.text = element_text(size = 10), 
                   strip.background = element_blank()),
             ggplot(tmle.results[sample.size==sim.sample]) + theme_bw() +
             geom_point(aes(x = initial, y = as.numeric(cov.tmle), shape = as.factor(sample.size))) +
             scale_shape_manual("sample size", values=c(4, 8, 9)) + 
             facet_grid(. ~ setting) +
             geom_hline(yintercept = 0.95, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("coverage") + xlab("") +
             theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
                   strip.text = element_text(size = 10),
                   strip.background = element_blank()),
             ggplot(tmle.results[sample.size==sim.sample]) + theme_bw() +
             geom_point(aes(x = initial, y = as.numeric(sd.tmle)/as.numeric(se.tmle), shape = as.factor(sample.size))) +
             scale_shape_manual("sample size", values=c(4, 8, 9)) + 
             facet_grid(. ~ setting) +
             geom_hline(yintercept = 1, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("SD/SE") + xlab("") +
             theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
                   strip.text = element_text(size = 10),
                   strip.background = element_blank()),
             ggplot(tmle.results[sample.size==sim.sample]) + theme_bw() + 
             geom_point(aes(x = initial, y = as.numeric(mse.tmle)/as.numeric(mse.km), shape = as.factor(sample.size))) +
             scale_shape_manual("sample size", values=c(4, 8, 9)) + 
             facet_grid(. ~ setting) +
             geom_hline(yintercept = 1, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("MSE/MSE(KM)") + xlab("") +
             theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
                   strip.text = element_text(size = 10),  
                   strip.background = element_blank()),
             ncol=1)
#+END_SRC

#+RESULTS[(2022-08-31 13:53:17) 270753cedc53a63a726e615257e8cb422c289897]:
[[file:./simulation/output/simultation-results-nfollic.png]]


[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#web-appendix][Back to top]]

*** Sensitivity to hyperparameter selection (HAL)




#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports none  :session *R* :cache yes
M <- 500
sim.sample <- 2000#1000#2000#nrow(follic)#2000#1000#nrow(follic)

hyper.parameters <- data.table(expand.grid(cut.time = c(10,15,20,25,30,35),
                                           cut.time.A = c(5,10,15,20,25,30,35),
                                           cut.covars = c(5,10,15,20),
                                           cut.two.way = c(0,5,10)))

hyper.parameters <- hyper.parameters[cut.time.A <= cut.time & cut.two.way <= cut.covars]

hyper.parameters[, cut.time.A := sapply(cut.time, function(x) min(x, 15))]
hyper.parameters[, cut.time.covar := cut.time.A]

hyper.parameters <- unique(hyper.parameters, by = names(hyper.parameters))

hyper.parameters <- unique(hyper.parameters[cut.covars %in% c(5,10,15) & !(cut.covars %in% c(10,15) & cut.two.way == 5)], by = names(hyper.parameters))

hyper.parameters <- hyper.parameters[rev(order(hyper.parameters[["cut.covars"]]))]

contmle.results <- do.call("rbind", lapply(list("Randomized treatment + independent censoring", "Informative censoring"), function(outer.which) {
  out.inner <- data.table(do.call("rbind", lapply(1:nrow(hyper.parameters), function(hp.row) {
    try(c(unlist(follic.output.fun(M = M,
                                   randomized.treatment = outer.which == "Randomized treatment + independent censoring",
                                   observed.treatment = outer.which != "Randomized treatment + independent censoring",
                                   informative.censoring = outer.which != "Randomized treatment + independent censoring",
                                   observed.covars = TRUE,
                                   cut.time = hyper.parameters[hp.row, "cut.time"][[1]],
                                   cut.time.A = hyper.parameters[hp.row, "cut.time.A"][[1]],
                                   cut.time.covar = hyper.parameters[hp.row, "cut.time.covar"][[1]],
                                   cut.covars = hyper.parameters[hp.row, "cut.covars"][[1]],
                                   cut.two.way = hyper.parameters[hp.row, "cut.two.way"][[1]],
                                   hal.sl = FALSE,
                                   fit.initial = "hal",
                                   sim.sample = sim.sample)),
          cut.time = hyper.parameters[hp.row, "cut.time"][[1]],
          cut.time.A = hyper.parameters[hp.row, "cut.time.A"][[1]],
          cut.time.covar = hyper.parameters[hp.row, "cut.time.covar"][[1]],
          cut.covars = hyper.parameters[hp.row, "cut.covars"][[1]],
          cut.two.way = hyper.parameters[hp.row, "cut.two.way"][[1]]))
  })))
  out.inner[, setting := outer.which]
  return(out.inner[substr(bias.tmle, 1, 5) != "Error"])
}))

contmle.results[, cut.covars := as.character(cut.covars)]
contmle.results[, cut.two.way := as.character(cut.two.way)]
#+END_SRC


#+BEGIN_SRC R :results file graphics :file ./simulation/output/simultation-sensitivity-results-n2000.png :exports none :session *R* :cache yes :height 1500 :width 500
tmle.results[, cut.time:=rep(contmle.results[, unique(cut.time)], length=nrow(tmle.results))]
grid.arrange(ggplot(contmle.results) + theme_bw() +
             geom_point(data=tmle.results, aes(x = cut.time, y = as.numeric(bias.tmle)), col="white", alpha=0) +
             geom_point(aes(x = cut.time, y = as.numeric(bias.tmle), shape = cut.covars, col = cut.two.way)) +
             facet_wrap(. ~ setting, scales = "free_y") +  
             geom_hline(yintercept = 0, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("bias") + xlab("") +
             scale_shape_manual(values=c(4, 8, 9)) +
             theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
                   strip.text = element_text(size = 10), 
                   strip.background = element_blank()),
             ggplot(contmle.results) + theme_bw() +
             geom_point(data=tmle.results, aes(x = cut.time, y = as.numeric(cov.tmle)), col="white", alpha=0) +
             geom_point(aes(x = cut.time, y = as.numeric(cov.tmle), shape = cut.covars, col = cut.two.way)) +
             facet_wrap(. ~ setting, scales = "free_y") + 
             geom_hline(yintercept = 0.95, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("coverage") + xlab("") +
             scale_shape_manual(values=c(4, 8, 9)) +
             theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
                   strip.text = element_text(size = 10), 
                   strip.background = element_blank()),
             ggplot(contmle.results) + theme_bw() +
             geom_point(data=tmle.results, aes(x = cut.time, y = as.numeric(sd.tmle)/as.numeric(se.tmle)), col="white", alpha=0) +
             geom_point(aes(x = cut.time, y = as.numeric(sd.tmle)/as.numeric(se.tmle), shape = cut.covars, col = cut.two.way)) +
             facet_wrap(. ~ setting, scales = "free_y") + 
             geom_hline(yintercept = 1, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("SD/SE") + xlab("") +
             scale_shape_manual(values=c(4, 8, 9)) +
             theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
                   strip.text = element_text(size = 10), 
                   strip.background = element_blank()),
             ggplot(contmle.results) + theme_bw() +
             geom_point(data=tmle.results, aes(x = cut.time, y = as.numeric(mse.tmle)), col="white", alpha=0) +
             geom_point(aes(x = cut.time, y = as.numeric(mse.tmle), shape = cut.covars, col = cut.two.way)) +
             facet_wrap(. ~ setting, scales = "free_y") + 
             ylab("MSE") + xlab("") +
             scale_shape_manual(values=c(4, 8, 9)) +
             theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
                   strip.text = element_text(size = 10), 
                   strip.background = element_blank()),
             ggplot(contmle.results) + theme_bw() +
             geom_point(data=tmle.results, aes(x = cut.time, y = as.numeric(mse.tmle)/as.numeric(mse.km)), col="white", alpha=0) +
             geom_point(aes(x = cut.time, y = as.numeric(mse.tmle)/as.numeric(mse.km), shape = cut.covars, col = cut.two.way)) +
             facet_wrap(. ~ setting, scales = "free_y") + 
             ylab("MSE/MSE(KM)") + xlab("") +
             scale_shape_manual(values=c(4, 8, 9)) +
             geom_hline(yintercept = 1, linetype = "dashed", col = "red", alpha = 0.5) +
             theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
                   strip.text = element_text(size = 10), 
                   strip.background = element_blank()),
             ncol = 1
             )
#+END_SRC

#+RESULTS[(2022-08-31 14:07:15) bcabd56bee9348d99aa575414b33c0f0f711d467]:
[[file:./simulation/output/simultation-sensitivity-results-n2000.png]]


[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#web-appendix][Back to top]]


*** More results for survtmle

#+BEGIN_SRC R :results file graphics :file ./simulation/output/survtmle-results.png :exports none :session *R* :cache yes :height 1100 :width 2500
sim.sample <- 1000   
survtmle.results <- do.call("rbind", lapply(c(nrow(follic), 1000, 2000), function(sim.sample) {
  out.outer <- do.call("rbind", lapply(list("Randomized treatment + independent censoring", "Informative censoring"), function(outer.which) {
    do.call("rbind", lapply(list((0:10)*4, (0:20)*2, (0:40), (0:80)/2), function(inner.grid) { 
      out.inner <- data.table(do.call("rbind", lapply(list("glm", "glm-misspecified", "sl"), function(inner.sl) {
        try(unlist(follic.output.survtmle(M = M, 
                                          randomized.treatment = outer.which == "Randomized treatment + independent censoring",
                                          observed.treatment = outer.which != "Randomized treatment + independent censoring",
                                          informative.censoring = outer.which != "Randomized treatment + independent censoring",
                                          observed.covars = TRUE,
                                          sl.survtmle = inner.sl == "sl",
                                          survtmle.glm.misspecify = inner.sl == "glm-misspecified",
                                          grid.survtmle = inner.grid, 
                                          sim.sample = sim.sample))) 
      })))
      out.inner[, initial := c("GLM", "GLM-misspecified", "SL")][, grid.length.used := length(inner.grid)][, setting := outer.which]
      return(out.inner[substr(bias.survtmle, 1, 5) != "Error"])
    }))
  }))
  out.outer[, sample.size:=sim.sample]
  return(out.outer)
}))

grid.arrange(ggplot(survtmle.results) + theme_bw() +   
             geom_point(aes(x = grid.length.used, y = as.numeric(bias.survtmle), shape = as.factor(sample.size))) +
             scale_shape_manual("sample size", values=c(4, 8, 9)) +  
             facet_grid(initial ~ setting) +
             geom_hline(yintercept = 0, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("bias") + xlab("grid length used") +
             theme(strip.text = element_text(size = 9.5),
                   strip.background = element_blank()),
             ggplot(survtmle.results) + theme_bw() +
             geom_point(aes(x = grid.length.used, y = as.numeric(cov.survtmle), shape = as.factor(sample.size))) +
             scale_shape_manual("sample size", values=c(4, 8, 9)) + 
             facet_grid(initial ~ setting) +
             geom_hline(yintercept = 0.95, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("coverage") + xlab("grid length used") +
             theme(strip.text = element_text(size = 9.5),
                   strip.background = element_blank()),
             ggplot(survtmle.results) + theme_bw() +
             geom_point(aes(x = grid.length.used, y = as.numeric(sd.survtmle), shape = as.factor(sample.size))) +
             scale_shape_manual("sample size", values=c(4, 8, 9)) + 
             facet_grid(initial ~ setting) +
             ylab("SD") + xlab("grid length used") +
             theme(strip.text = element_text(size = 9.5),  
                   strip.background = element_blank()),
             ggplot(survtmle.results) + theme_bw() +
             geom_point(aes(x = grid.length.used, y = as.numeric(sd.survtmle)/as.numeric(se.survtmle), shape = as.factor(sample.size))) +
             scale_shape_manual("sample size", values=c(4, 8, 9)) + 
             facet_grid(initial ~ setting) +
             geom_hline(yintercept = 1, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("SD/SE") + xlab("grid length used") +
             theme(strip.text = element_text(size = 9.5),  
                   strip.background = element_blank()))     
#+END_SRC

#+RESULTS[(2022-09-16 11:45:54) 06af581775faabdff0ae05e7c5fd7d9dc4a22b51]:
[[file:./simulation/output/survtmle-results.png]]

[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#web-appendix][Back to top]]

** Sample code

Simulate data with informative censoring: 

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes  
sim.follic <- simulate.follic.3(seed = 100,
                                sim.sample = 1000,
                                informative.censoring = TRUE)
#+END_SRC    

Apply continuous-time TMLE with initial etimation based on the Poisson-HAL: 

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes  
contmle(sim.follic, estimation=list("outcome"=list(fit="hal", 
                                                   model=Surv(time, status==1)~chemo+stage+hgb+age),
                                    "cens"=list(fit="hal",
                                                model=Surv(time, status==0)~chemo+stage+hgb+age),
                                    "cr2"=list(fit="hal",
                                               model=Surv(time, status==2)~chemo+stage+hgb+age)
                                    ),
        treat.model=chemo~stage+hgb+age,
        treat.effect="ate",
        output.km=TRUE,
        hal.screening=TRUE,
        V=3, lambda.cvs=seq(0.1, 0.03, length=10), maxit=1e5, penalize.time=FALSE,
        tau=10, target=1)
#+END_SRC    

[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#web-appendix][Back to top]]

** Follic analysis

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes  
follic.cox.F1.ate <- contmle(follic, estimation=list("outcome"=list(fit="cox",
                                                                    model=Surv(time, status==1)~chemo+stage+age+hgb+age+hgb,
                                                                    lambda.cvs=seq(0.008, 0.02, length=10)),
                                                     "cens"=list(fit="cox",
                                                                 model=Surv(time, status==0)~chemo+stage+age+hgb),
                                                     "cr2"=list(fit="cox",
                                                                model=Surv(time, status==2)~chemo+stage+age+hgb)
                                                     ),
                             treat.model=chemo~stage+hgb+age,
                             treat.effect="ate",
                             hal.screening=TRUE,
                             output.km=TRUE,
                             verbose=TRUE,
                             iterative=TRUE,
                             cut.time=18,
                             cut.time.covar=15,
                             cut.time.A=15,
                             cut.covars=15,
                             cut.two.way=10,
                             V=3, lambda.cvs=seq(0.1, 0.03, length=10), maxit=1e5, penalize.time=FALSE,
                             tau=10, target=1)


follic.hal.F1.ate <- contmle(follic, estimation=list("outcome"=list(fit="hal",
                                                                    model=Surv(time, status==1)~chemo+stage+age+hgb+age+hgb,
                                                                    lambda.cvs=seq(0.008, 0.02, length=10)),
                                                     "cens"=list(fit="hal",
                                                                 model=Surv(time, status==0)~chemo+stage+age+hgb),
                                                     "cr2"=list(fit="hal",
                                                                model=Surv(time, status==2)~chemo+stage+age+hgb)
                                                     ),
                             treat.model=chemo~stage+hgb+age,
                             treat.effect="ate",
                             hal.screening=TRUE,
                             output.km=TRUE,
                             verbose=TRUE,
                             iterative=TRUE,
                             cut.time=18,
                             cut.time.covar=15,
                             cut.time.A=15,
                             cut.covars=15,
                             cut.two.way=10,
                             V=3, lambda.cvs=seq(0.1, 0.03, length=10), maxit=1e5, penalize.time=FALSE,
                             tau=10, target=1)

follic.hal.sl.F1.ate <- contmle(follic, estimation=list("outcome"=list(fit="hal",
                                                                       model=Surv(time, status==1)~chemo+stage+age+hgb+age+hgb,
                                                                       lambda.cvs=seq(0.008, 0.02, length=10)),
                                                        "cens"=list(fit="hal",
                                                                    model=Surv(time, status==0)~chemo+stage+age+hgb),
                                                        "cr2"=list(fit="hal",
                                                                   model=Surv(time, status==2)~chemo+stage+age+hgb)
                                                        ),
                                treat.model=chemo~stage+hgb+age,
                                treat.effect="ate",
                                output.km=TRUE,
                                verbose=TRUE,
                                iterative=TRUE,
                                cut.time=18,
                                cut.time.covar=15,
                                cut.time.A=15,
                                cut.covars=15,
                                cut.two.way=10,
                                V=3, lambda.cvs=seq(0.1, 0.03, length=10), maxit=1e5, penalize.time=FALSE,
                                hal.sl = TRUE,
                                hal.screening = TRUE,
                                tau=10, target=1)

follic.rf.F1.ate <- contmle(follic, estimation=list("outcome"=list(fit="rf",
                                                                    model=Surv(time, status==1)~chemo+stage+age+hgb+age+hgb,
                                                                    lambda.cvs=seq(0.008, 0.02, length=10)),
                                                     "cens"=list(fit="rf",
                                                                 model=Surv(time, status==0)~chemo+stage+age+hgb),
                                                     "cr2"=list(fit="rf",
                                                                model=Surv(time, status==2)~chemo+stage+age+hgb)
                                                     ),
                             treat.model=chemo~stage+hgb+age,
                             treat.effect="ate",
                             output.km=TRUE,
                             verbose=TRUE,
                             iterative=TRUE,
                             V=3, lambda.cvs=seq(0.1, 0.03, length=10), maxit=1e5, penalize.time=FALSE,
                             tau=10, target=1)
#+END_SRC    

[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#web-appendix][Back to top]]

** Follic data results

Poisson HAL (fixed partitioning) approach:

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output :exports output  :session *R:2* :cache yes  
follic.hal.F1.ate$tmle$F1 
#+END_SRC    

#+RESULTS[(2022-09-09 14:05:08) 997ba8063cbc4ade17bda17e58e4fae0c33f1290]:
:          tau=10    
: tmle.est -0.0534139
: tmle.se  0.06708393

Poisson HAL (cross-validated) approach:

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output :exports output  :session *R:2* :cache yes  
follic.hal.sl.F1.ate$tmle$F1 
#+END_SRC    

#+RESULTS[(2022-09-09 14:05:22) 2cfd42ffbb29241f2f59e32de5877f6dfcb96773]:
:          tau=10     
: tmle.est -0.05048722
: tmle.se  0.06996858

Cox approach (before and after TMLE step):

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output :exports output  :session *R:2* :cache yes
print("Before TMLE:")
follic.cox.F1.ate$init$F1
print("After TMLE:")
follic.cox.F1.ate$tmle$F1 
#+END_SRC    

#+RESULTS[(2022-09-09 14:06:16) 79e2812d1dab3829bb69bf9a27e65b77d9033674]:
: [1] "Before TMLE:"
:               tau=10
: init.est -0.09200635
: init.se   0.07478107
: [1] "After TMLE:"
:          tau=10     
: tmle.est -0.03349503
: tmle.se  0.07394969

Random forest approach:

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output :exports output  :session *R:2* :cache yes  
follic.rf.F1.ate$tmle$F1 
#+END_SRC    

#+RESULTS[(2022-09-09 14:04:51) 623351a485112718d0ea123383fcf379afa02470]:
:          tau=10     
: tmle.est -0.05566238
: tmle.se  0.0675828


** Baseline hazard estimation

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports none  :session *R* :cache yes
#######################################################################################

follic[, age.stage := age*(stage == 1)]

#--- informative censoring
bhaz.cox <- contmle(follic, estimation=list("outcome"=list(fit="cox",
                                                           model=Surv(time, status==1)~chemo+stage+hgb+age.stage,
                                                           changepoint=0.003,
                                                           lambda.cvs=seq(0.008, 0.02, length=10)),
                                            "cens"=list(fit="cox",
                                                        model=Surv(time, status==0)~chemo+stage+hgb+age,
                                                        changepoint=1.2),
                                            "cr2"=list(fit="cox",
                                                       model=Surv(time, status==2)~chemo+stage+hgb+age)
                                            ),
                    treat.model=chemo~stage+hgb+age,
                    treat.effect="ate",
                    no.small.steps=500, 
                    output.km=TRUE,
                    output.bhaz=TRUE, 
                    V=3, lambda.cvs=seq(0.1, 0.03, length=10), maxit=1e5, penalize.time=FALSE,
                    verbose=TRUE,
                    iterative=TRUE,
                    tau=20, target=1)

#--- uninformative censoring
bhaz.uninformative.cens <-
  contmle(follic, estimation=list("outcome"=list(fit="cox",
                                                 model=Surv(time, status==1)~chemo+stage+hgb+age.stage,
                                                 changepoint=0.003,
                                                 lambda.cvs=seq(0.008, 0.02, length=10)),
                                  "cens"=list(fit="cox", model=Surv(time, status==0)~1),
                                  "cr2"=list(fit="cox",
                                             model=Surv(time, status==2)~chemo+stage+hgb+age)
                                  ),
          treat.model=chemo~stage+hgb+age,
          treat.effect="ate", no.small.steps=500,
          output.km=TRUE, output.bhaz=TRUE, V=3,
          lambda.cvs=seq(0.1, 0.03, length=10), maxit=1e5, penalize.time=FALSE,
          verbose=TRUE, iterative=TRUE, tau=20, target=1)

#######################################################################################

bhazs <- bhaz.cox[[1]]

bhazs[, chaz1 := cumsum(dhaz1*exp1), by = "chemo"]
bhazs[, chaz2 := cumsum(dhaz2*exp2), by = "chemo"] 
bhazs[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"]

#######################################################################################

#+END_SRC



#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long <- melt(bhazs, id.vars=c("chemo", "time"))   
bhazs.long[, variable2:=substr(variable,1,4)]    
bhazs.long <- bhazs.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.long[, chemo:=paste0("chemo = ", chemo)]
 
ggplot(bhazs.long) + geom_point(aes(x=log(time), y=log(value))) +
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),  
        plot.title = element_text(size = 16, hjust = 0.9),  
        strip.background = element_blank())+ 
  ylab("log(chaz)") + ggtitle("Log cumulative hazards as functions of log observed event times:")
#+END_SRC

#+RESULTS[(2022-08-01 09:04:16) bd626a42b0eeb6a76e56437ec89fa217f4373ca3]:
[[file:./figures/fig-log-hazards-log-time.png]]

Idea: Fit Weibull distributions that are allowed change over time,
corresponding to enforcing piecewise linearity in the previous plots.

*** Cause one events (with one changepoint)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard1-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
log.t0.1 <- -0.5 
log.t1.1 <- 0.75     
log.t2.1 <- 2 

kmin.1.t1.1 <- min((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])>log.t0.1])
kmax.1.t1.1 <- max((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])<log.t1.1])
kmin.1.t1.0 <- min((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])>log.t0.1])
kmax.1.t1.0 <- max((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])<log.t1.1])

kmin.1.t2.1 <- min((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])>log.t1.1])
kmax.1.t2.1 <- max((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])<log.t2.1])
kmin.1.t2.0 <- min((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])>log.t1.1])
kmax.1.t2.0 <- max((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])<log.t2.1])

#plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t1.1:kmax.1.t1.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t1.1:kmax.1.t1.1]))
fit.status1.t1.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t1.1:kmax.1.t1.1])
#abline(a = coef(fit.status1.t1.1)[1], b = coef(fit.status1.t1.1)[2], col = "red")
(gamma.status1.t1.1 <- coef(fit.status1.t1.1)[2])
(lambda.status1.t1.1 <- exp(coef(fit.status1.t1.1)[1]/gamma.status1.t1.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t1.0:kmax.1.t1.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t1.0:kmax.1.t1.0]))
fit.status1.t1.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t1.0:kmax.1.t1.0])
#abline(a = coef(fit.status1.t1.0)[1], b = coef(fit.status1.t1.0)[2], col = "red")
(gamma.status1.t1.0 <- coef(fit.status1.t1.0)[2])
(lambda.status1.t1.0 <- exp(coef(fit.status1.t1.0)[1]/gamma.status1.t1.0))

# plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t2.1:kmax.1.t2.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t2.1:kmax.1.t2.1]))
fit.status1.t2.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t2.1:kmax.1.t2.1])
#abline(a = coef(fit.status1.t2.1)[1], b = coef(fit.status1.t2.1)[2], col = "red")
(gamma.status1.t2.1 <- coef(fit.status1.t2.1)[2])
(lambda.status1.t2.1 <- exp(coef(fit.status1.t2.1)[1]/gamma.status1.t2.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t2.0:kmax.1.t2.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t2.0:kmax.1.t2.0]))
fit.status1.t2.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t2.0:kmax.1.t2.0])
#abline(a = coef(fit.status1.t2.0)[1], b = coef(fit.status1.t2.0)[2], col = "red")
(gamma.status1.t2.0 <- coef(fit.status1.t2.0)[2])
(lambda.status1.t2.0 <- exp(coef(fit.status1.t2.0)[1]/gamma.status1.t2.0))

bhazs.long[time>=exp(log.t0.1) & time<=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.1*log(lambda.status1.t1.1) + gamma.status1.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.1) & time<=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.0*log(lambda.status1.t1.0) + gamma.status1.t1.0*log(time))]

bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.1*log(lambda.status1.t2.1) + gamma.status1.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.0*log(lambda.status1.t2.0) + gamma.status1.t2.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 1"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.text = element_text(size=16), 
        strip.background = element_blank())+  
  ylab("log(chaz)") + ggtitle("Fitting two straight lines:")
#+END_SRC

#+RESULTS[(2022-08-09 10:52:56) cb285317e00a4970c96f8247b80bebeeff6fae29]:
[[file:./figures/fig-log-hazards-log-time-hazard1-changepoint.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard1-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",   
           fit.chaz:=exp(gamma.status1.t1.1*log(lambda.status1.t1.1) + gamma.status1.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.0*log(lambda.status1.t1.0) + gamma.status1.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.1*log(lambda.status1.t2.1) + gamma.status1.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.0*log(lambda.status1.t2.0) + gamma.status1.t2.0*log(time))]
   
ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 1"]) +
  geom_point(aes(x=time, y=value)) + 
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.3),
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:") 
#+END_SRC

#+RESULTS[(2022-08-09 10:53:03) 5d7d5123006964f34ac46dcf0c602db4ef3edfaa]:
[[file:./figures/fig-hazards-time-hazard1-changepoint.png]]

*** Cause one events (add changepoint)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard1-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs <- bhaz.cox[[1]]   
  
bhazs[, chaz1 := cumsum(dhaz1*exp1), by = "chemo"]
bhazs[, chaz2 := cumsum(dhaz2*exp2), by = "chemo"]  
bhazs[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"]

bhazs.long <- melt(bhazs, id.vars=c("chemo", "time")) 
bhazs.long[, variable2:=substr(variable,1,4)] 
bhazs.long <- bhazs.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.long[, chemo:=paste0("chemo = ", chemo)]

log.t0.1 <- -2#-0.5
log.t1.1 <- -0.5#0.75
log.t2.1 <- 2.5#2
log.t3.1 <- 3.5#3

kmin.1.t1.1 <- min((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])>log.t0.1])
kmax.1.t1.1 <- max((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])<log.t1.1])
kmin.1.t1.0 <- min((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])>log.t0.1])
kmax.1.t1.0 <- max((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])<log.t1.1])

kmin.1.t2.1 <- min((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])>log.t1.1])
kmax.1.t2.1 <- max((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])<log.t2.1])
kmin.1.t2.0 <- min((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])>log.t1.1])
kmax.1.t2.0 <- max((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])<log.t2.1])

kmin.1.t3.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t2.1])
kmax.1.t3.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t3.1])
kmin.1.t3.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t2.1])
kmax.1.t3.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t3.1])


#plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t1.1:kmax.1.t1.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t1.1:kmax.1.t1.1]))
fit.status1.t1.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t1.1:kmax.1.t1.1])
#abline(a = coef(fit.status1.t1.1)[1], b = coef(fit.status1.t1.1)[2], col = "red")
(gamma.status1.t1.1 <- coef(fit.status1.t1.1)[2])
(lambda.status1.t1.1 <- exp(coef(fit.status1.t1.1)[1]/gamma.status1.t1.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t1.0:kmax.1.t1.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t1.0:kmax.1.t1.0]))
fit.status1.t1.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t1.0:kmax.1.t1.0])
#abline(a = coef(fit.status1.t1.0)[1], b = coef(fit.status1.t1.0)[2], col = "red")
(gamma.status1.t1.0 <- coef(fit.status1.t1.0)[2])
(lambda.status1.t1.0 <- exp(coef(fit.status1.t1.0)[1]/gamma.status1.t1.0))

# plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t2.1:kmax.1.t2.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t2.1:kmax.1.t2.1]))
fit.status1.t2.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t2.1:kmax.1.t2.1])
#abline(a = coef(fit.status1.t2.1)[1], b = coef(fit.status1.t2.1)[2], col = "red")
(gamma.status1.t2.1 <- coef(fit.status1.t2.1)[2])
(lambda.status1.t2.1 <- exp(coef(fit.status1.t2.1)[1]/gamma.status1.t2.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t2.0:kmax.1.t2.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t2.0:kmax.1.t2.0]))
fit.status1.t2.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t2.0:kmax.1.t2.0])
#abline(a = coef(fit.status1.t2.0)[1], b = coef(fit.status1.t2.0)[2], col = "red")
(gamma.status1.t2.0 <- coef(fit.status1.t2.0)[2])
(lambda.status1.t2.0 <- exp(coef(fit.status1.t2.0)[1]/gamma.status1.t2.0))

# plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t3.1:kmax.1.t3.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t3.1:kmax.1.t3.1]))
fit.status1.t3.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t3.1:kmax.1.t3.1])
#abline(a = coef(fit.status1.t3.1)[1], b = coef(fit.status1.t3.1)[2], col = "red")
(gamma.status1.t3.1 <- coef(fit.status1.t3.1)[2])
(lambda.status1.t3.1 <- exp(coef(fit.status1.t3.1)[1]/gamma.status1.t3.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t3.0:kmax.1.t3.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t3.0:kmax.1.t3.0]))
fit.status1.t3.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t3.0:kmax.1.t3.0])
#abline(a = coef(fit.status1.t3.0)[1], b = coef(fit.status1.t3.0)[2], col = "red")
(gamma.status1.t3.0 <- coef(fit.status1.t3.0)[2])
(lambda.status1.t3.0 <- exp(coef(fit.status1.t3.0)[1]/gamma.status1.t3.0))

bhazs.long[time>=exp(log.t0.1) & time<=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.1*log(lambda.status1.t1.1) + gamma.status1.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.1) & time<=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.0*log(lambda.status1.t1.0) + gamma.status1.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.1*log(lambda.status1.t2.1) + gamma.status1.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.0*log(lambda.status1.t2.0) + gamma.status1.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.1*log(lambda.status1.t3.1) + gamma.status1.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.0*log(lambda.status1.t3.0) + gamma.status1.t3.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 1"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.text = element_text(size=16), 
        strip.background = element_blank())+  
  ylab("log(chaz)") + ggtitle("Fitting three straight lines:")

#+END_SRC

#+RESULTS[(2022-08-09 10:53:06) 0a417aa6c532b02b403c25e68c62dfe2ecd3afb6]:
[[file:./figures/fig-log-hazards-log-time-hazard1-2changepoints.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard1-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",     
           fit.chaz:=exp(gamma.status1.t1.1*log(lambda.status1.t1.1) + gamma.status1.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.0*log(lambda.status1.t1.0) + gamma.status1.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.1*log(lambda.status1.t2.1) + gamma.status1.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.0*log(lambda.status1.t2.0) + gamma.status1.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.1*log(lambda.status1.t3.1) + gamma.status1.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.0*log(lambda.status1.t3.0) + gamma.status1.t3.0*log(time))]
 
ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 1"]) +
  geom_point(aes(x=time, y=value)) + 
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.3),
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:") 
#+END_SRC

#+RESULTS[(2022-08-09 10:53:09) fec4190de65f8664bcb0ce055ea589715d184298]:
[[file:./figures/fig-hazards-time-hazard1-2changepoints.png]]


*** Cause one events (three changepoints)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard1-3changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs <- bhaz.cox[[1]]    
 
bhazs[, chaz1 := cumsum(dhaz1*exp1), by = "chemo"]
bhazs[, chaz2 := cumsum(dhaz2*exp2), by = "chemo"] 
bhazs[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"]
 
bhazs.long <- melt(bhazs, id.vars=c("chemo", "time"))  
bhazs.long[, variable2:=substr(variable,1,4)] 
bhazs.long <- bhazs.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.long[, chemo:=paste0("chemo = ", chemo)]

log.t0.1 <- -1.2#-2#-0.5
log.t1.1 <- 0.75#-0.5#0.75
log.t2.1 <- 2.5#2
log.t3.1 <- 3.15
log.t4.1 <- 3.5#3

kmin.1.t1.1 <- min((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])>log.t0.1])
kmax.1.t1.1 <- max((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])<log.t1.1])
kmin.1.t1.0 <- min((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])>log.t0.1])
kmax.1.t1.0 <- max((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])<log.t1.1])

kmin.1.t2.1 <- min((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])>log.t1.1])
kmax.1.t2.1 <- max((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])<log.t2.1])
kmin.1.t2.0 <- min((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])>log.t1.1])
kmax.1.t2.0 <- max((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])<log.t2.1])

kmin.1.t3.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t2.1])
kmax.1.t3.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t3.1])
kmin.1.t3.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t2.1])
kmax.1.t3.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t3.1])

kmin.1.t4.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t3.1])
kmax.1.t4.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t4.1])
kmin.1.t4.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t3.1])
kmax.1.t4.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t4.1])

#plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t1.1:kmax.1.t1.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t1.1:kmax.1.t1.1]))
fit.status1.t1.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t1.1:kmax.1.t1.1])
#abline(a = coef(fit.status1.t1.1)[1], b = coef(fit.status1.t1.1)[2], col = "red")
(gamma.status1.t1.1 <- coef(fit.status1.t1.1)[2])
(lambda.status1.t1.1 <- exp(coef(fit.status1.t1.1)[1]/gamma.status1.t1.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t1.0:kmax.1.t1.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t1.0:kmax.1.t1.0]))
fit.status1.t1.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t1.0:kmax.1.t1.0])
#abline(a = coef(fit.status1.t1.0)[1], b = coef(fit.status1.t1.0)[2], col = "red")
(gamma.status1.t1.0 <- coef(fit.status1.t1.0)[2])
(lambda.status1.t1.0 <- exp(coef(fit.status1.t1.0)[1]/gamma.status1.t1.0))

# plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t2.1:kmax.1.t2.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t2.1:kmax.1.t2.1]))
fit.status1.t2.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t2.1:kmax.1.t2.1])
#abline(a = coef(fit.status1.t2.1)[1], b = coef(fit.status1.t2.1)[2], col = "red")
(gamma.status1.t2.1 <- coef(fit.status1.t2.1)[2])
(lambda.status1.t2.1 <- exp(coef(fit.status1.t2.1)[1]/gamma.status1.t2.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t2.0:kmax.1.t2.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t2.0:kmax.1.t2.0]))
fit.status1.t2.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t2.0:kmax.1.t2.0])
#abline(a = coef(fit.status1.t2.0)[1], b = coef(fit.status1.t2.0)[2], col = "red")
(gamma.status1.t2.0 <- coef(fit.status1.t2.0)[2])
(lambda.status1.t2.0 <- exp(coef(fit.status1.t2.0)[1]/gamma.status1.t2.0))

# plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t3.1:kmax.1.t3.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t3.1:kmax.1.t3.1]))
fit.status1.t3.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t3.1:kmax.1.t3.1])
#abline(a = coef(fit.status1.t3.1)[1], b = coef(fit.status1.t3.1)[2], col = "red")
(gamma.status1.t3.1 <- coef(fit.status1.t3.1)[2])
(lambda.status1.t3.1 <- exp(coef(fit.status1.t3.1)[1]/gamma.status1.t3.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t3.0:kmax.1.t3.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t3.0:kmax.1.t3.0]))
fit.status1.t3.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t3.0:kmax.1.t3.0])
#abline(a = coef(fit.status1.t3.0)[1], b = coef(fit.status1.t3.0)[2], col = "red")
(gamma.status1.t3.0 <- coef(fit.status1.t3.0)[2])
(lambda.status1.t3.0 <- exp(coef(fit.status1.t3.0)[1]/gamma.status1.t3.0))

# plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t4.1:kmax.1.t4.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t4.1:kmax.1.t4.1]))
fit.status1.t4.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t4.1:kmax.1.t4.1])
#abline(a = coef(fit.status1.t4.1)[1], b = coef(fit.status1.t4.1)[2], col = "red")
(gamma.status1.t4.1 <- coef(fit.status1.t4.1)[2])
(lambda.status1.t4.1 <- exp(coef(fit.status1.t4.1)[1]/gamma.status1.t4.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t4.0:kmax.1.t4.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t4.0:kmax.1.t4.0]))
fit.status1.t4.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t4.0:kmax.1.t4.0])
#abline(a = coef(fit.status1.t4.0)[1], b = coef(fit.status1.t4.0)[2], col = "red")
(gamma.status1.t4.0 <- coef(fit.status1.t4.0)[2])
(lambda.status1.t4.0 <- exp(coef(fit.status1.t4.0)[1]/gamma.status1.t4.0))

bhazs.long[time>=exp(log.t0.1) & time<=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.1*log(lambda.status1.t1.1) + gamma.status1.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.1) & time<=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.0*log(lambda.status1.t1.0) + gamma.status1.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.1*log(lambda.status1.t2.1) + gamma.status1.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.0*log(lambda.status1.t2.0) + gamma.status1.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.1*log(lambda.status1.t3.1) + gamma.status1.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.0*log(lambda.status1.t3.0) + gamma.status1.t3.0*log(time))]
bhazs.long[time>=exp(log.t3.1) & time<=exp(log.t4.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t4.1*log(lambda.status1.t4.1) + gamma.status1.t4.1*log(time))]
bhazs.long[time>=exp(log.t3.1) & time<=exp(log.t4.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t4.0*log(lambda.status1.t4.0) + gamma.status1.t4.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 1"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.text = element_text(size=16), 
        strip.background = element_blank())+  
  ylab("log(chaz)") + ggtitle("Fitting four straight lines:")

#+END_SRC

#+RESULTS[(2022-08-09 10:53:12) 850f18072cf9288f2203ce7e4e66bca5934edce6]:
[[file:./figures/fig-log-hazards-log-time-hazard1-3changepoints.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard1-3changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",       
           fit.chaz:=exp(gamma.status1.t1.1*log(lambda.status1.t1.1) + gamma.status1.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.0*log(lambda.status1.t1.0) + gamma.status1.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.1*log(lambda.status1.t2.1) + gamma.status1.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.0*log(lambda.status1.t2.0) + gamma.status1.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.1*log(lambda.status1.t3.1) + gamma.status1.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.0*log(lambda.status1.t3.0) + gamma.status1.t3.0*log(time))]
bhazs.long[time>=exp(log.t3.1) & time<=exp(log.t4.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t4.1*log(lambda.status1.t4.1) + gamma.status1.t4.1*log(time))]
bhazs.long[time>=exp(log.t3.1) & time<=exp(log.t4.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t4.0*log(lambda.status1.t4.0) + gamma.status1.t4.0*log(time))]
 
ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 1"]) +
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.3),
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:") 
#+END_SRC

#+RESULTS[(2022-08-09 10:53:15) 158cf4b8b83518bc70cf14984bdcb4160ba557a5]:
[[file:./figures/fig-hazards-time-hazard1-3changepoints.png]]



#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard1-3changepoints-together.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",        
           fit.chaz:=exp(gamma.status1.t1.1*log(lambda.status1.t1.1) + gamma.status1.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.0*log(lambda.status1.t1.0) + gamma.status1.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.1*log(lambda.status1.t2.1) + gamma.status1.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.0*log(lambda.status1.t2.0) + gamma.status1.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.1*log(lambda.status1.t3.1) + gamma.status1.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.0*log(lambda.status1.t3.0) + gamma.status1.t3.0*log(time))]
bhazs.long[time>=exp(log.t3.1) & time<=exp(log.t4.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t4.1*log(lambda.status1.t4.1) + gamma.status1.t4.1*log(time))]
bhazs.long[time>=exp(log.t3.1) & time<=exp(log.t4.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t4.0*log(lambda.status1.t4.0) + gamma.status1.t4.0*log(time))]

bhazs.long1 <- bhazs.long[, fit.chaz1:=fit.chaz][status == "status = 1", variable2 == "chaz", c("chemo", "time", "fit.chaz1")]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 1"]) +
  #geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz, linetype=chemo))+
  facet_grid(.~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),
        strip.text = element_text(size=16), 
        plot.title = element_text(size = 16, hjust = -0.3),
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:") 
#+END_SRC

#+RESULTS[(2022-08-09 10:53:17) 768d0cb7bad1740e8f126187c24797cc689e027d]:
[[file:./figures/fig-hazards-time-hazard1-3changepoints-together.png]]

[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#web-appendix][Back to top]]

*** Cause two events (one changepoint)


#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard2-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
log.t0.2 <- 0      
log.t1.2 <- 1.5 
log.t2.2 <- 3    

kmin.2.t1.1 <- min((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])>log.t0.2])
kmax.2.t1.1 <- max((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])<log.t1.2])
kmin.2.t1.0 <- min((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])>log.t0.2])
kmax.2.t1.0 <- max((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])<log.t1.2])

kmin.2.t2.1 <- min((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])>log.t1.2])
kmax.2.t2.1 <- max((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])<log.t2.2])
kmin.2.t2.0 <- min((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])>log.t1.2])
kmax.2.t2.0 <- max((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])<log.t2.2])

#plot(log(bhazs[chaz2>0 & chemo==1][["time"]])[kmin.2.t1.1:kmax.2.t1.1],log(bhazs[chaz2>0 & chemo==1][["chaz2"]][kmin.2.t1.1:kmax.2.t1.1]))
fit.status2.t1.1 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==1][kmin.2.t1.1:kmax.2.t1.1])
#abline(a = coef(fit.status2.t1.1)[1], b = coef(fit.status2.t1.1)[2], col = "red")
(gamma.status2.t1.1 <- coef(fit.status2.t1.1)[2])
(lambda.status2.t1.1 <- exp(coef(fit.status2.t1.1)[1]/gamma.status2.t1.1))
#plot(log(bhazs[chaz2>0 & chemo==0][["time"]])[kmin.2.t1.0:kmax.2.t1.0],log(bhazs[chaz2>0 & chemo==0][["chaz2"]][kmin.2.t1.0:kmax.2.t1.0]))
fit.status2.t1.0 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==0][kmin.2.t1.0:kmax.2.t1.0])
#abline(a = coef(fit.status2.t1.0)[1], b = coef(fit.status2.t1.0)[2], col = "red")
(gamma.status2.t1.0 <- coef(fit.status2.t1.0)[2])
(lambda.status2.t1.0 <- exp(coef(fit.status2.t1.0)[1]/gamma.status2.t1.0))

# plot(log(bhazs[chaz2>0 & chemo==1][["time"]])[kmin.2.t2.1:kmax.2.t2.1],log(bhazs[chaz2>0 & chemo==1][["chaz2"]][kmin.2.t2.1:kmax.2.t2.1]))
fit.status2.t2.1 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==1][kmin.2.t2.1:kmax.2.t2.1])
#abline(a = coef(fit.status2.t2.1)[1], b = coef(fit.status2.t2.1)[2], col = "red")
(gamma.status2.t2.1 <- coef(fit.status2.t2.1)[2])
(lambda.status2.t2.1 <- exp(coef(fit.status2.t2.1)[1]/gamma.status2.t2.1))
#plot(log(bhazs[chaz2>0 & chemo==0][["time"]])[kmin.2.t2.0:kmax.2.t2.0],log(bhazs[chaz2>0 & chemo==0][["chaz2"]][kmin.2.t2.0:kmax.2.t2.0]))
fit.status2.t2.0 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==0][kmin.2.t2.0:kmax.2.t2.0])
#abline(a = coef(fit.status2.t2.0)[1], b = coef(fit.status2.t2.0)[2], col = "red")
(gamma.status2.t2.0 <- coef(fit.status2.t2.0)[2])
(lambda.status2.t2.0 <- exp(coef(fit.status2.t2.0)[1]/gamma.status2.t2.0))

bhazs.long[time>=exp(log.t0.2) & time<=exp(log.t1.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t1.1*log(lambda.status2.t1.1) + gamma.status2.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.2) & time<=exp(log.t1.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t1.0*log(lambda.status2.t1.0) + gamma.status2.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.2) & time<=exp(log.t2.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.1*log(lambda.status2.t2.1) + gamma.status2.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.2) & time<=exp(log.t2.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.0*log(lambda.status2.t2.0) + gamma.status2.t2.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 2"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.background = element_blank())+
  ylab("log(chaz)") + ggtitle("Fitting two straight lines:")
#+END_SRC

#+RESULTS[(2022-08-09 10:53:21) e15ec97ce59b078b1ae69d196837d609be80baf1]:
[[file:./figures/fig-log-hazards-log-time-hazard2-changepoint.png]]



#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard2-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.2) & chemo=="chemo = 1" & status=="status = 2",    
           fit.chaz:=exp(gamma.status2.t1.1*log(lambda.status2.t1.1) + gamma.status2.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t1.0*log(lambda.status2.t1.0) + gamma.status2.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.1*log(lambda.status2.t2.1) + gamma.status2.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.0*log(lambda.status2.t2.0) + gamma.status2.t2.0*log(time))]
  
ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 2"]) +   
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.3),
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:")
#+END_SRC

#+RESULTS[(2022-08-09 10:53:23) af315f7ca4d720ac72426b26a3750984ca213f27]:
[[file:./figures/fig-hazards-time-hazard2-changepoint.png]]

*** Cause two events (add changepoint)


#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard2-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs <- bhaz.cox[[1]]   
 
bhazs[, chaz1 := cumsum(dhaz1*exp1), by = "chemo"] 
bhazs[, chaz2 := cumsum(dhaz2*exp2), by = "chemo"]
bhazs[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"] 
 
bhazs.long <- melt(bhazs, id.vars=c("chemo", "time")) 
bhazs.long[, variable2:=substr(variable,1,4)] 
bhazs.long <- bhazs.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.long[, chemo:=paste0("chemo = ", chemo)]

log.t0.2 <- 0 
log.t1.2 <- 1.5 
log.t2.2 <- 3
log.t3.2 <- 3.6  

kmin.2.t1.1 <- min((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])>log.t0.2])
kmax.2.t1.1 <- max((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])<log.t1.2])
kmin.2.t1.0 <- min((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])>log.t0.2])
kmax.2.t1.0 <- max((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])<log.t1.2])

kmin.2.t2.1 <- min((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])>log.t1.2])
kmax.2.t2.1 <- max((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])<log.t2.2])
kmin.2.t2.0 <- min((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])>log.t1.2])
kmax.2.t2.0 <- max((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])<log.t2.2])

kmin.2.t3.1 <- min((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])>log.t2.2])
kmax.2.t3.1 <- max((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])<log.t3.2])
kmin.2.t3.0 <- min((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])>log.t2.2])
kmax.2.t3.0 <- max((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])<log.t3.2])

#plot(log(bhazs[chaz2>0 & chemo==1][["time"]])[kmin.2.t1.1:kmax.2.t1.1],log(bhazs[chaz2>0 & chemo==1][["chaz2"]][kmin.2.t1.1:kmax.2.t1.1]))
fit.status2.t1.1 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==1][kmin.2.t1.1:kmax.2.t1.1])
#abline(a = coef(fit.status2.t1.1)[1], b = coef(fit.status2.t1.1)[2], col = "red")
(gamma.status2.t1.1 <- coef(fit.status2.t1.1)[2])
(lambda.status2.t1.1 <- exp(coef(fit.status2.t1.1)[1]/gamma.status2.t1.1))
#plot(log(bhazs[chaz2>0 & chemo==0][["time"]])[kmin.2.t1.0:kmax.2.t1.0],log(bhazs[chaz2>0 & chemo==0][["chaz2"]][kmin.2.t1.0:kmax.2.t1.0]))
fit.status2.t1.0 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==0][kmin.2.t1.0:kmax.2.t1.0])
#abline(a = coef(fit.status2.t1.0)[1], b = coef(fit.status2.t1.0)[2], col = "red")
(gamma.status2.t1.0 <- coef(fit.status2.t1.0)[2])
(lambda.status2.t1.0 <- exp(coef(fit.status2.t1.0)[1]/gamma.status2.t1.0))

# plot(log(bhazs[chaz2>0 & chemo==1][["time"]])[kmin.2.t2.1:kmax.2.t2.1],log(bhazs[chaz2>0 & chemo==1][["chaz2"]][kmin.2.t2.1:kmax.2.t2.1]))
fit.status2.t2.1 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==1][kmin.2.t2.1:kmax.2.t2.1])
#abline(a = coef(fit.status2.t2.1)[1], b = coef(fit.status2.t2.1)[2], col = "red")
(gamma.status2.t2.1 <- coef(fit.status2.t2.1)[2])
(lambda.status2.t2.1 <- exp(coef(fit.status2.t2.1)[1]/gamma.status2.t2.1))
#plot(log(bhazs[chaz2>0 & chemo==0][["time"]])[kmin.2.t2.0:kmax.2.t2.0],log(bhazs[chaz2>0 & chemo==0][["chaz2"]][kmin.2.t2.0:kmax.2.t2.0]))
fit.status2.t2.0 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==0][kmin.2.t2.0:kmax.2.t2.0])
#abline(a = coef(fit.status2.t2.0)[1], b = coef(fit.status2.t2.0)[2], col = "red")
(gamma.status2.t2.0 <- coef(fit.status2.t2.0)[2])
(lambda.status2.t2.0 <- exp(coef(fit.status2.t2.0)[1]/gamma.status2.t2.0))

# plot(log(bhazs[chaz2>0 & chemo==1][["time"]])[kmin.2.t3.1:kmax.2.t3.1],log(bhazs[chaz2>0 & chemo==1][["chaz2"]][kmin.2.t3.1:kmax.2.t3.1]))
fit.status2.t3.1 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==1][kmin.2.t3.1:kmax.2.t3.1])
#abline(a = coef(fit.status2.t3.1)[1], b = coef(fit.status2.t3.1)[2], col = "red")
(gamma.status2.t3.1 <- coef(fit.status2.t3.1)[2])
(lambda.status2.t3.1 <- exp(coef(fit.status2.t3.1)[1]/gamma.status2.t3.1))
#plot(log(bhazs[chaz2>0 & chemo==0][["time"]])[kmin.2.t3.0:kmax.2.t3.0],log(bhazs[chaz2>0 & chemo==0][["chaz2"]][kmin.2.t3.0:kmax.2.t3.0]))
fit.status2.t3.0 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==0][kmin.2.t3.0:kmax.2.t3.0])
#abline(a = coef(fit.status2.t3.0)[1], b = coef(fit.status2.t3.0)[2], col = "red")
(gamma.status2.t3.0 <- coef(fit.status2.t3.0)[2])
(lambda.status2.t3.0 <- exp(coef(fit.status2.t3.0)[1]/gamma.status2.t3.0))

bhazs.long[time>=exp(log.t0.2) & time<=exp(log.t1.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t1.1*log(lambda.status2.t1.1) + gamma.status2.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.2) & time<=exp(log.t1.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t1.0*log(lambda.status2.t1.0) + gamma.status2.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.2) & time<=exp(log.t2.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.1*log(lambda.status2.t2.1) + gamma.status2.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.2) & time<=exp(log.t2.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.0*log(lambda.status2.t2.0) + gamma.status2.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.2) & time<=exp(log.t3.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t3.1*log(lambda.status2.t3.1) + gamma.status2.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.2) & time<=exp(log.t3.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t3.0*log(lambda.status2.t3.0) + gamma.status2.t3.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 2"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.background = element_blank())+
  ylab("log(chaz)") + ggtitle("Fitting three straight lines:")
#+END_SRC

#+RESULTS[(2022-08-09 10:53:26) f43f2c238ec03dbfddc347ec21038eb412b2507e]:
[[file:./figures/fig-log-hazards-log-time-hazard2-2changepoints.png]]



#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard2-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.2) & chemo=="chemo = 1" & status=="status = 2",   
           fit.chaz:=exp(gamma.status2.t1.1*log(lambda.status2.t1.1) + gamma.status2.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.2) & chemo=="chemo = 0" & status=="status = 2", 
           fit.chaz:=exp(gamma.status2.t1.0*log(lambda.status2.t1.0) + gamma.status2.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.2) & time<=exp(log.t2.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.1*log(lambda.status2.t2.1) + gamma.status2.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.2) & time<=exp(log.t2.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.0*log(lambda.status2.t2.0) + gamma.status2.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t3.1*log(lambda.status2.t3.1) + gamma.status2.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t3.0*log(lambda.status2.t3.0) + gamma.status2.t3.0*log(time))]
 
ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 2"]) +   
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.3),
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:")
#+END_SRC

#+RESULTS[(2022-08-01 09:07:23) a819beb4c63bf77e6b7e9a8dc88a1ed3e63b7b64]:
[[file:./figures/fig-hazards-time-hazard2-2changepoints.png]]



#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard2-2changepoints-together.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.2) & chemo=="chemo = 1" & status=="status = 2",    
           fit.chaz:=exp(gamma.status2.t1.1*log(lambda.status2.t1.1) + gamma.status2.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.2) & chemo=="chemo = 0" & status=="status = 2", 
           fit.chaz:=exp(gamma.status2.t1.0*log(lambda.status2.t1.0) + gamma.status2.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.2) & time<=exp(log.t2.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.1*log(lambda.status2.t2.1) + gamma.status2.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.2) & time<=exp(log.t2.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.0*log(lambda.status2.t2.0) + gamma.status2.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t3.1*log(lambda.status2.t3.1) + gamma.status2.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t3.0*log(lambda.status2.t3.0) + gamma.status2.t3.0*log(time))]

bhazs.long2 <- bhazs.long[, fit.chaz2:=fit.chaz][status == "status = 2", variable2 == "chaz", c("chemo", "time", "fit.chaz2")]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 2"]) +
  #geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz, linetype=chemo))+
  facet_grid(.~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),
        strip.text = element_text(size=16), 
        plot.title = element_text(size = 16, hjust = -0.3),
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:") 
#+END_SRC

#+RESULTS[(2022-08-09 10:53:34) b2adc31c2654e45866b4a9c4b6be1aabf070d0d7]:
[[file:./figures/fig-hazards-time-hazard2-2changepoints-together.png]]


[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#web-appendix][Back to top]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-F1-time.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long12 <- merge(bhazs.long1[, dhaz1:=diff(c(0,fit.chaz1)), by="chemo"],
                      bhazs.long2[, dhaz2:=diff(c(0,fit.chaz2)), by="chemo"], by=c("chemo", "time"))
bhazs.long12[, surv1:=c(1, exp(-fit.chaz1-fit.chaz2)[-.N]), by="chemo"]
bhazs.long12[, F1:=cumsum(surv1*dhaz1), by="chemo"]
bhazs.long12[, F2:=cumsum(surv1*dhaz2), by="chemo"]
bhazs.long12[, S:=1-F1-F2, by="chemo"]
bhazs.12 <- melt(bhazs.long12, id.vars=c("chemo", "time"))[variable%in%c("F1", "F2", "S")][variable=="F1", variable:="F[1]"][variable=="F2", variable:="F[2]"]

ggplot(bhazs.12[time<=2.5]) +
  #geom_point(aes(x=time, y=value)) +
  geom_line(aes(x=time, y=value, linetype=chemo))+
  facet_wrap(.~variable, scales="free_y", labeller = label_parsed) + 
  theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),
        strip.text = element_text(size=16), 
        plot.title = element_text(size = 16, hjust = -0.3),
        strip.background = element_blank())+
  ylab("absolute risk") + ggtitle("Resulting absolute risk functions:") 
#+END_SRC

*** Censoring events (covariate dependent)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard0-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
log.t0.0 <- 1.2    
log.t1.0 <- 1.9     
log.t2.0 <- 3.2 

kmin.0.t1.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t0.0])
kmax.0.t1.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t1.0])
kmin.0.t1.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t0.0])
kmax.0.t1.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t1.0])

kmin.0.t2.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t1.0])
kmax.0.t2.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t2.0])
kmin.0.t2.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t1.0])
kmax.0.t2.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t2.0])

#plot(log(bhazs[chaz0>0 & chemo==1][["time"]])[kmin.0.t1.1:kmax.0.t1.1],log(bhazs[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t1.1:kmax.0.t1.1]))
fit.status0.t1.1 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==1][kmin.0.t1.1:kmax.0.t1.1])
#abline(a = coef(fit.status0.t1.1)[1], b = coef(fit.status0.t1.1)[2], col = "red")
(gamma.status0.t1.1 <- coef(fit.status0.t1.1)[2])
(lambda.status0.t1.1 <- exp(coef(fit.status0.t1.1)[1]/gamma.status0.t1.1))
#plot(log(bhazs[chaz0>0 & chemo==0][["time"]])[kmin.0.t1.0:kmax.0.t1.0],log(bhazs[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t1.0:kmax.0.t1.0]))
fit.status0.t1.0 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==0][kmin.0.t1.0:kmax.0.t1.0])
#abline(a = coef(fit.status0.t1.0)[1], b = coef(fit.status0.t1.0)[2], col = "red")
(gamma.status0.t1.0 <- coef(fit.status0.t1.0)[2])
(lambda.status0.t1.0 <- exp(coef(fit.status0.t1.0)[1]/gamma.status0.t1.0))

# plot(log(bhazs[chaz0>0 & chemo==1][["time"]])[kmin.0.t2.1:kmax.0.t2.1],log(bhazs[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t2.1:kmax.0.t2.1]))
fit.status0.t2.1 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==1][kmin.0.t2.1:kmax.0.t2.1])
#abline(a = coef(fit.status0.t2.1)[1], b = coef(fit.status0.t2.1)[2], col = "red")
(gamma.status0.t2.1 <- coef(fit.status0.t2.1)[2])
(lambda.status0.t2.1 <- exp(coef(fit.status0.t2.1)[1]/gamma.status0.t2.1))
#plot(log(bhazs[chaz0>0 & chemo==0][["time"]])[kmin.0.t2.0:kmax.0.t2.0],log(bhazs[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t2.0:kmax.0.t2.0]))
fit.status0.t2.0 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==0][kmin.0.t2.0:kmax.0.t2.0])
#abline(a = coef(fit.status0.t2.0)[1], b = coef(fit.status0.t2.0)[2], col = "red")
(gamma.status0.t2.0 <- coef(fit.status0.t2.0)[2])
(lambda.status0.t2.0 <- exp(coef(fit.status0.t2.0)[1]/gamma.status0.t2.0))

bhazs.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t1.1*log(lambda.status0.t1.1) + gamma.status0.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t1.0*log(lambda.status0.t1.0) + gamma.status0.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t2.1*log(lambda.status0.t2.1) + gamma.status0.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t2.0*log(lambda.status0.t2.0) + gamma.status0.t2.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.background = element_blank())+ 
  ylab("log(chaz)") + ggtitle("Fitting two straight lines:")
#+END_SRC

#+RESULTS[(2022-08-09 10:53:36) 5746a66fffac8aedc081c21307b454a48e8681bc]:
[[file:./figures/fig-log-hazards-log-time-hazard0-changepoint.png]]



#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard0-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",      
           fit.chaz:=exp(gamma.status0.t1.1*log(lambda.status0.t1.1) + gamma.status0.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t1.0*log(lambda.status0.t1.0) + gamma.status0.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t2.1*log(lambda.status0.t2.1) + gamma.status0.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t2.0*log(lambda.status0.t2.0) + gamma.status0.t2.0*log(time))]
  
ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 0"]) + 
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.3), 
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:")
#+END_SRC

#+RESULTS[(2022-08-09 10:53:38) ea47b52a772bde72dff549e7dd5a7947bd30d851]:
[[file:./figures/fig-hazards-time-hazard0-changepoint.png]]


*** Censoring events (covariate dependent, add changepoint)


#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard0-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs <- bhaz.cox[[1]]  
    
bhazs[, chaz1 := cumsum(dhaz1*exp1), by = "chemo"]
bhazs[, chaz2 := cumsum(dhaz2*exp2), by = "chemo"]
bhazs[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"]

bhazs.long <- melt(bhazs, id.vars=c("chemo", "time")) 
bhazs.long[, variable2:=substr(variable,1,4)] 
bhazs.long <- bhazs.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.long[, chemo:=paste0("chemo = ", chemo)]

log.t0.0 <- 1.2
log.t1.0 <- 1.9   
log.t2.0 <- 3.2
log.t3.0 <- 3.5

kmin.0.t1.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t0.0])
kmax.0.t1.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t1.0])
kmin.0.t1.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t0.0])
kmax.0.t1.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t1.0])

kmin.0.t2.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t1.0])
kmax.0.t2.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t2.0])
kmin.0.t2.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t1.0])
kmax.0.t2.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t2.0])

kmin.0.t3.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t2.0])
kmax.0.t3.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t3.0])
kmin.0.t3.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t2.0])
kmax.0.t3.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t3.0])

#plot(log(bhazs[chaz0>0 & chemo==1][["time"]])[kmin.0.t1.1:kmax.0.t1.1],log(bhazs[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t1.1:kmax.0.t1.1]))
fit.status0.t1.1 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==1][kmin.0.t1.1:kmax.0.t1.1])
#abline(a = coef(fit.status0.t1.1)[1], b = coef(fit.status0.t1.1)[2], col = "red")
(gamma.status0.t1.1 <- coef(fit.status0.t1.1)[2])
(lambda.status0.t1.1 <- exp(coef(fit.status0.t1.1)[1]/gamma.status0.t1.1))
#plot(log(bhazs[chaz0>0 & chemo==0][["time"]])[kmin.0.t1.0:kmax.0.t1.0],log(bhazs[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t1.0:kmax.0.t1.0]))
fit.status0.t1.0 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==0][kmin.0.t1.0:kmax.0.t1.0])
#abline(a = coef(fit.status0.t1.0)[1], b = coef(fit.status0.t1.0)[2], col = "red")
(gamma.status0.t1.0 <- coef(fit.status0.t1.0)[2])
(lambda.status0.t1.0 <- exp(coef(fit.status0.t1.0)[1]/gamma.status0.t1.0))

# plot(log(bhazs[chaz0>0 & chemo==1][["time"]])[kmin.0.t2.1:kmax.0.t2.1],log(bhazs[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t2.1:kmax.0.t2.1]))
fit.status0.t2.1 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==1][kmin.0.t2.1:kmax.0.t2.1])
#abline(a = coef(fit.status0.t2.1)[1], b = coef(fit.status0.t2.1)[2], col = "red")
(gamma.status0.t2.1 <- coef(fit.status0.t2.1)[2])
(lambda.status0.t2.1 <- exp(coef(fit.status0.t2.1)[1]/gamma.status0.t2.1))
#plot(log(bhazs[chaz0>0 & chemo==0][["time"]])[kmin.0.t2.0:kmax.0.t2.0],log(bhazs[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t2.0:kmax.0.t2.0]))
fit.status0.t2.0 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==0][kmin.0.t2.0:kmax.0.t2.0])
#abline(a = coef(fit.status0.t2.0)[1], b = coef(fit.status0.t2.0)[2], col = "red")
(gamma.status0.t2.0 <- coef(fit.status0.t2.0)[2])
(lambda.status0.t2.0 <- exp(coef(fit.status0.t2.0)[1]/gamma.status0.t2.0))

# plot(log(bhazs[chaz0>0 & chemo==1][["time"]])[kmin.0.t3.1:kmax.0.t3.1],log(bhazs[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t3.1:kmax.0.t3.1]))
fit.status0.t3.1 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==1][kmin.0.t3.1:kmax.0.t3.1])
#abline(a = coef(fit.status0.t3.1)[1], b = coef(fit.status0.t3.1)[2], col = "red")
(gamma.status0.t3.1 <- coef(fit.status0.t3.1)[2])
(lambda.status0.t3.1 <- exp(coef(fit.status0.t3.1)[1]/gamma.status0.t3.1))
#plot(log(bhazs[chaz0>0 & chemo==0][["time"]])[kmin.0.t3.0:kmax.0.t3.0],log(bhazs[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t3.0:kmax.0.t3.0]))
fit.status0.t3.0 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==0][kmin.0.t3.0:kmax.0.t3.0])
#abline(a = coef(fit.status0.t3.0)[1], b = coef(fit.status0.t3.0)[2], col = "red")
(gamma.status0.t3.0 <- coef(fit.status0.t3.0)[2])
(lambda.status0.t3.0 <- exp(coef(fit.status0.t3.0)[1]/gamma.status0.t3.0))


bhazs.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t1.1*log(lambda.status0.t1.1) + gamma.status0.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t1.0*log(lambda.status0.t1.0) + gamma.status0.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t2.1*log(lambda.status0.t2.1) + gamma.status0.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t2.0*log(lambda.status0.t2.0) + gamma.status0.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.0) & time<=exp(log.t3.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t3.1*log(lambda.status0.t3.1) + gamma.status0.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.0) & time<=exp(log.t3.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t3.0*log(lambda.status0.t3.0) + gamma.status0.t3.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15), 
        strip.background = element_blank())+ 
  ylab("log(chaz)") + ggtitle("Fitting three straight lines:")
#+END_SRC

#+RESULTS[(2022-08-09 10:53:41) 5e0532511a0915c6dca347a4ce0b69cc5d60def6]:
[[file:./figures/fig-log-hazards-log-time-hazard0-2changepoints.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard0-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",      
                              fit.chaz:=exp(gamma.status0.t1.1*log(lambda.status0.t1.1) + gamma.status0.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t1.0*log(lambda.status0.t1.0) + gamma.status0.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.0) & time <= exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t2.1*log(lambda.status0.t2.1) + gamma.status0.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.0) & time <= exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t2.0*log(lambda.status0.t2.0) + gamma.status0.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t3.1*log(lambda.status0.t3.1) + gamma.status0.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t3.0*log(lambda.status0.t3.0) + gamma.status0.t3.0*log(time))]
 
ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 0"]) + 
  geom_point(aes(x=time, y=value)) +  
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16), 
        plot.title = element_text(size = 16, hjust = -0.1), 
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:")
#+END_SRC

#+RESULTS[(2022-08-09 10:53:44) 91a449ea5747ec349e6a29ace7dbd788ed810cc7]:
[[file:./figures/fig-hazards-time-hazard0-2changepoints.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard0-2changepoints-together.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",      
                              fit.chaz:=exp(gamma.status0.t1.1*log(lambda.status0.t1.1) + gamma.status0.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t1.0*log(lambda.status0.t1.0) + gamma.status0.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.0) & time <= exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t2.1*log(lambda.status0.t2.1) + gamma.status0.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.0) & time <= exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t2.0*log(lambda.status0.t2.0) + gamma.status0.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t3.1*log(lambda.status0.t3.1) + gamma.status0.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t3.0*log(lambda.status0.t3.0) + gamma.status0.t3.0*log(time))]
 
ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 0"]) +
  #geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz, linetype=chemo))+
  facet_grid(.~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),
        strip.text = element_text(size=16), 
        plot.title = element_text(size = 16, hjust = -0.3), 
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:") 
#+END_SRC

#+RESULTS[(2022-08-09 10:53:46) a95e808c1d1b094e6973be4dc37dc350d14ebe95]:
[[file:./figures/fig-hazards-time-hazard0-2changepoints-together.png]]

[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#web-appendix][Back to top]]

*** Censoring events (independent)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard0-independent.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.uninformative.cens <- bhaz.uninformative.cens[[1]]      
bhazs.uninformative.cens[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"] 
  
bhazs.uninformative.cens.long <- melt(bhazs.uninformative.cens, id.vars=c("chemo", "time")) 
bhazs.uninformative.cens.long[, variable2:=substr(variable,1,4)] 
bhazs.uninformative.cens.long <- bhazs.uninformative.cens.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.uninformative.cens.long[, chemo:=paste0("chemo = ", chemo)]

if (FALSE) {

  dev.off()

  grid.arrange(ggplot(bhazs.uninformative.cens.long[status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
               facet_grid(chemo~status, scales="free")+theme_bw()+
               theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
                     strip.text = element_text(size=16), 
                     plot.title = element_text(size = 16, hjust = 0.9),  
                     strip.background = element_blank())+ 
               ylab("log(chaz)") + ggtitle("Log cumulative hazards as functions of log observed event times:"),
               ggplot(bhazs.long[status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
               facet_grid(chemo~status, scales="free")+theme_bw()+
               theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
                     strip.text = element_text(size=16), 
                     plot.title = element_text(size = 16, hjust = 0.9),  
                     strip.background = element_blank())+ 
               ylab("log(chaz)") + ggtitle("Log cumulative hazards as functions of log observed event times:"),
               nrow=1)

}

log.t0.0 <- 1
log.t1.0 <- 3  

kmin.0.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t0.0])
kmax.0.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t1.0])
kmin.0.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t0.0])
kmax.0.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t1.0])

#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.1:kmax.0.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.1:kmax.0.1]))
fit.status0.independent.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.1:kmax.0.1])
#abline(a = coef(fit.status0.independent.1)[1], b = coef(fit.status0.independent.1)[2], col = "red")
gamma.status0.independent.1 <- coef(fit.status0.independent.1)[2]
lambda.status0.independent.1 <- exp(coef(fit.status0.independent.1)[1]/gamma.status0.independent.1)
#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.0:kmax.0.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.0:kmax.0.0]))
fit.status0.independent.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.0:kmax.0.0])
#abline(a = coef(fit.status0.independent.0)[1], b = coef(fit.status0.independent.0)[2], col = "red")
gamma.status0.independent.0 <- coef(fit.status0.independent.0)[2]
lambda.status0.independent.0 <- exp(coef(fit.status0.independent.0)[1]/gamma.status0.independent.0)

bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t0.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.1*log(lambda.status0.independent.1) + gamma.status0.independent.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.0*log(lambda.status0.independent.0) + gamma.status0.independent.0*log(time))]

ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.background = element_blank())+ 
  ylab("log(chaz)") + ggtitle("Fitting a single straight line:")
#+END_SRC

#+RESULTS[(2022-08-09 10:53:49) e76f789bc234268cada338f0d92f5eeb0e368ea3]:
[[file:./figures/fig-log-hazards-log-time-hazard0-independent.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard0-independent.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.uninformative.cens.long[chemo=="chemo = 1" & status=="status = 0",      
           fit.chaz:=exp(gamma.status0.independent.1*log(lambda.status0.independent.1) + gamma.status0.independent.1*log(time))]
bhazs.uninformative.cens.long[chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.independent.0*log(lambda.status0.independent.0) + gamma.status0.independent.0*log(time))]
  
ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + 
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.1), 
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:")
#+END_SRC

#+RESULTS[(2022-08-09 10:53:52) 563e993159f4a0184d82f2dc3660a50ca8640400]:
[[file:./figures/fig-hazards-time-hazard0-independent.png]]


*** Censoring events (independent, but with changepoint)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard0-independent-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.uninformative.cens <- bhaz.uninformative.cens[[1]]    
bhazs.uninformative.cens[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"]  

bhazs.uninformative.cens.long <- melt(bhazs.uninformative.cens, id.vars=c("chemo", "time")) 
bhazs.uninformative.cens.long[, variable2:=substr(variable,1,4)] 
bhazs.uninformative.cens.long <- bhazs.uninformative.cens.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.uninformative.cens.long[, chemo:=paste0("chemo = ", chemo)]
  
log.t0.0 <- 1.2
log.t1.0 <- 1.9    
log.t2.0 <- 3.5

kmin.0.t1.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t0.0])
kmax.0.t1.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t1.0])
kmin.0.t1.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t0.0])
kmax.0.t1.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t1.0])

kmin.0.t2.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t1.0])
kmax.0.t2.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t2.0])
kmin.0.t2.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t1.0])
kmax.0.t2.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t2.0])

#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.t1.1:kmax.0.t1.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t1.1:kmax.0.t1.1]))
fit.status0.independent.t1.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.t1.1:kmax.0.t1.1])
#abline(a = coef(fit.status0.independent.t1.1)[1], b = coef(fit.status0.independent.t1.1)[2], col = "red")
(gamma.status0.independent.t1.1 <- coef(fit.status0.independent.t1.1)[2])
(lambda.status0.independent.t1.1 <- exp(coef(fit.status0.independent.t1.1)[1]/gamma.status0.independent.t1.1))
#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.t1.0:kmax.0.t1.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t1.0:kmax.0.t1.0]))
fit.status0.independent.t1.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.t1.0:kmax.0.t1.0])
#abline(a = coef(fit.status0.independent.t1.0)[1], b = coef(fit.status0.independent.t1.0)[2], col = "red")
(gamma.status0.independent.t1.0 <- coef(fit.status0.independent.t1.0)[2])
(lambda.status0.independent.t1.0 <- exp(coef(fit.status0.independent.t1.0)[1]/gamma.status0.independent.t1.0))

# plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.t2.1:kmax.0.t2.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t2.1:kmax.0.t2.1]))
fit.status0.independent.t2.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.t2.1:kmax.0.t2.1])
#abline(a = coef(fit.status0.independent.t2.1)[1], b = coef(fit.status0.independent.t2.1)[2], col = "red")
(gamma.status0.independent.t2.1 <- coef(fit.status0.independent.t2.1)[2])
(lambda.status0.independent.t2.1 <- exp(coef(fit.status0.independent.t2.1)[1]/gamma.status0.independent.t2.1))
#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.t2.0:kmax.0.t2.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t2.0:kmax.0.t2.0]))
fit.status0.independent.t2.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.t2.0:kmax.0.t2.0])
#abline(a = coef(fit.status0.independent.t2.0)[1], b = coef(fit.status0.independent.t2.0)[2], col = "red")
(gamma.status0.independent.t2.0 <- coef(fit.status0.independent.t2.0)[2])
(lambda.status0.independent.t2.0 <- exp(coef(fit.status0.independent.t2.0)[1]/gamma.status0.independent.t2.0))

bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t1.1*log(lambda.status0.independent.t1.1) + gamma.status0.independent.t1.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t1.0*log(lambda.status0.independent.t1.0) + gamma.status0.independent.t1.0*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t2.1*log(lambda.status0.independent.t2.1) + gamma.status0.independent.t2.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t2.0*log(lambda.status0.independent.t2.0) + gamma.status0.independent.t2.0*log(time))]

ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.background = element_blank())+  
  ylab("log(chaz)") + ggtitle("Fitting two straight lines:")
#+END_SRC

#+RESULTS[(2022-08-09 10:53:54) 0cf57bfd537de62085be2b1d4f0bb594f23a8d1b]:
[[file:./figures/fig-log-hazards-log-time-hazard0-independent-changepoint.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard0-independent-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.uninformative.cens.long[time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",       
           fit.chaz:=exp(gamma.status0.independent.t1.1*log(lambda.status0.independent.t1.1) + gamma.status0.independent.t1.1*log(time))]
bhazs.uninformative.cens.long[time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.independent.t1.0*log(lambda.status0.independent.t1.0) + gamma.status0.independent.t1.0*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.independent.t2.1*log(lambda.status0.independent.t2.1) + gamma.status0.independent.t2.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.independent.t2.0*log(lambda.status0.independent.t2.0) + gamma.status0.independent.t2.0*log(time))]
   
ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + 
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.1), 
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:")
#+END_SRC

#+RESULTS[(2022-08-09 10:53:57) af0e7419da5a3072a00184fa4b3ca30d886d2275]:
[[file:./figures/fig-hazards-time-hazard0-independent-changepoint.png]]



*** Censoring events (independent, but with two changepoints)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard0-independent-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.uninformative.cens <- bhaz.uninformative.cens[[1]]   
bhazs.uninformative.cens[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"]   

bhazs.uninformative.cens.long <- melt(bhazs.uninformative.cens, id.vars=c("chemo", "time")) 
bhazs.uninformative.cens.long[, variable2:=substr(variable,1,4)] 
bhazs.uninformative.cens.long <- bhazs.uninformative.cens.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.uninformative.cens.long[, chemo:=paste0("chemo = ", chemo)]

log.t0.0 <- 1.2 
log.t1.0 <- 1.9   
log.t2.0 <- 3.2
log.t3.0 <- 3.5

kmin.0.t1.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t0.0])
kmax.0.t1.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t1.0])
kmin.0.t1.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t0.0])
kmax.0.t1.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t1.0])

kmin.0.t2.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t1.0])
kmax.0.t2.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t2.0])
kmin.0.t2.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t1.0])
kmax.0.t2.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t2.0])

kmin.0.t3.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t2.0])
kmax.0.t3.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t3.0])
kmin.0.t3.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t2.0])
kmax.0.t3.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t3.0])

#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.t1.1:kmax.0.t1.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t1.1:kmax.0.t1.1]))
fit.status0.independent.t1.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.t1.1:kmax.0.t1.1])
#abline(a = coef(fit.status0.independent.t1.1)[1], b = coef(fit.status0.independent.t1.1)[2], col = "red")
(gamma.status0.independent.t1.1 <- coef(fit.status0.independent.t1.1)[2])
(lambda.status0.independent.t1.1 <- exp(coef(fit.status0.independent.t1.1)[1]/gamma.status0.independent.t1.1))
#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.t1.0:kmax.0.t1.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t1.0:kmax.0.t1.0]))
fit.status0.independent.t1.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.t1.0:kmax.0.t1.0])
#abline(a = coef(fit.status0.independent.t1.0)[1], b = coef(fit.status0.independent.t1.0)[2], col = "red")
(gamma.status0.independent.t1.0 <- coef(fit.status0.independent.t1.0)[2])
(lambda.status0.independent.t1.0 <- exp(coef(fit.status0.independent.t1.0)[1]/gamma.status0.independent.t1.0))

# plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.t2.1:kmax.0.t2.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t2.1:kmax.0.t2.1]))
fit.status0.independent.t2.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.t2.1:kmax.0.t2.1])
#abline(a = coef(fit.status0.independent.t2.1)[1], b = coef(fit.status0.independent.t2.1)[2], col = "red")
(gamma.status0.independent.t2.1 <- coef(fit.status0.independent.t2.1)[2])
(lambda.status0.independent.t2.1 <- exp(coef(fit.status0.independent.t2.1)[1]/gamma.status0.independent.t2.1))
#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.t2.0:kmax.0.t2.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t2.0:kmax.0.t2.0]))
fit.status0.independent.t2.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.t2.0:kmax.0.t2.0])
#abline(a = coef(fit.status0.independent.t2.0)[1], b = coef(fit.status0.independent.t2.0)[2], col = "red")
(gamma.status0.independent.t2.0 <- coef(fit.status0.independent.t2.0)[2])
(lambda.status0.independent.t2.0 <- exp(coef(fit.status0.independent.t2.0)[1]/gamma.status0.independent.t2.0))

# plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.t3.1:kmax.0.t3.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t3.1:kmax.0.t3.1]))
fit.status0.independent.t3.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.t3.1:kmax.0.t3.1])
#abline(a = coef(fit.status0.independent.t3.1)[1], b = coef(fit.status0.independent.t3.1)[2], col = "red")
(gamma.status0.independent.t3.1 <- coef(fit.status0.independent.t3.1)[2])
(lambda.status0.independent.t3.1 <- exp(coef(fit.status0.independent.t3.1)[1]/gamma.status0.independent.t3.1))
#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.t3.0:kmax.0.t3.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t3.0:kmax.0.t3.0]))
fit.status0.independent.t3.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.t3.0:kmax.0.t3.0])
#abline(a = coef(fit.status0.independent.t3.0)[1], b = coef(fit.status0.independent.t3.0)[2], col = "red")
(gamma.status0.independent.t3.0 <- coef(fit.status0.independent.t3.0)[2])
(lambda.status0.independent.t3.0 <- exp(coef(fit.status0.independent.t3.0)[1]/gamma.status0.independent.t3.0))


bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t1.1*log(lambda.status0.independent.t1.1) + gamma.status0.independent.t1.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t1.0*log(lambda.status0.independent.t1.0) + gamma.status0.independent.t1.0*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t2.1*log(lambda.status0.independent.t2.1) + gamma.status0.independent.t2.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t2.0*log(lambda.status0.independent.t2.0) + gamma.status0.independent.t2.0*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t2.0) & time<=exp(log.t3.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t3.1*log(lambda.status0.independent.t3.1) + gamma.status0.independent.t3.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t2.0) & time<=exp(log.t3.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t3.0*log(lambda.status0.independent.t3.0) + gamma.status0.independent.t3.0*log(time))]

ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.background = element_blank())+  
  ylab("log(chaz)") + ggtitle("Fitting three straight lines:")
#+END_SRC

#+RESULTS[(2022-08-09 10:53:59) 126cda13c476f3b1dbac36fa69850c2b69aaa886]:
[[file:./figures/fig-log-hazards-log-time-hazard0-independent-2changepoints.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard0-independent-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.uninformative.cens.long[time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",     
                              fit.chaz:=exp(gamma.status0.independent.t1.1*log(lambda.status0.independent.t1.1) + gamma.status0.independent.t1.1*log(time))]
bhazs.uninformative.cens.long[time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t1.0*log(lambda.status0.independent.t1.0) + gamma.status0.independent.t1.0*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time <= exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t2.1*log(lambda.status0.independent.t2.1) + gamma.status0.independent.t2.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time <= exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t2.0*log(lambda.status0.independent.t2.0) + gamma.status0.independent.t2.0*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t3.1*log(lambda.status0.independent.t3.1) + gamma.status0.independent.t3.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t3.0*log(lambda.status0.independent.t3.0) + gamma.status0.independent.t3.0*log(time))]
  
ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + 
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16), 
        plot.title = element_text(size = 16, hjust = -0.1), 
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:") 
#+END_SRC

#+RESULTS[(2022-08-09 10:54:02) 486f99c167714ca8f0479d222350ccc54c77d57b]:
[[file:./figures/fig-hazards-time-hazard0-independent-2changepoints.png]]



#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard0-independent-2changepoints-together.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.uninformative.cens.long[time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",       
                              fit.chaz:=exp(gamma.status0.independent.t1.1*log(lambda.status0.independent.t1.1) + gamma.status0.independent.t1.1*log(time))]
bhazs.uninformative.cens.long[time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t1.0*log(lambda.status0.independent.t1.0) + gamma.status0.independent.t1.0*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time <= exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t2.1*log(lambda.status0.independent.t2.1) + gamma.status0.independent.t2.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time <= exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t2.0*log(lambda.status0.independent.t2.0) + gamma.status0.independent.t2.0*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t3.1*log(lambda.status0.independent.t3.1) + gamma.status0.independent.t3.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t3.0*log(lambda.status0.independent.t3.0) + gamma.status0.independent.t3.0*log(time))]

ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + 
  #geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz, linetype=chemo))+
  facet_grid(.~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),
        strip.text = element_text(size=16), 
        plot.title = element_text(size = 16, hjust = -0.1), 
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:") 
#+END_SRC

#+RESULTS[(2022-08-09 10:54:11) 582c4947dda6d4fb2227a47b7b46c2f195ae17cd]:
[[file:./figures/fig-hazards-time-hazard0-independent-2changepoints-together.png]]

[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#web-appendix][Back to top]]


