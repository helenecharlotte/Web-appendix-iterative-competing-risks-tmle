* Web appendix

This is the web appendix to our manuscript entitled /Estimation of/
/time-specific intervention effects on continuously distributed/
/time-to-event outcomes by targeted maximum likelihood estimation/.

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports none  :session *R* :cache yes  
setwd("~/research/TMLE-from-2020june/survival-baseline/Web-appendix-iterative-competing-risks-tmle")
#+END_SRC

** Overview

Data:
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle][Follic data example]]

Simulation results: 
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#simulation-results][All results]]
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#more-results-for-survtmle][Extra results for survtmle (varying grid)]]

Sample code:
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#sample-code][Sample code]]

Fitting baseline hazard by Weibull distributions with parameters
changing over time:

- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#cause-one-events-three-changepoints][Final fitted cause-one specific baseline hazard]]
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#cause-two-events-add-changepoint][Final fitted cause-two specific baseline hazard]]
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#censoring-events-covariate-dependent-add-changepoint][Final fitted covariate dependent censoring baseline hazard]]
- [[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle#censoring-events-independent-but-with-two-changepoints][Final fitted covariate independent censoring baseline hazard]]

** Load packages and functions

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes  
library(data.table) 
library(zoo)
library(glmnet)
library(survival)
library(stringr) 
library(ggplot2)  
library(ltmle)
library(nleqslv)
library(parallel)
library(foreach)
library(doParallel)
library(prodlim)
library(gridExtra)
library(survival)
library(riskRegression)
library(Matrix)
library(hdnom)
library(MASS)
library(xtable)
library(timereg)
library(cmprsk)
library(randomForestSRC)
#+END_SRC    

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes  
source("./R/sim.data.continuous.R") 
source("./R/contmle.R") 
source("./R/cox.loss.fun.R") 
source("./R/lebesgue.loss.fun.R") 
source("./R/cv.fun.R")     
source("./R/basis.fun.R")
source("./R/hal.screening.R") 
source("./R/fit.hal.R")    
source("./R/cox.sl.R")  
source("./R/fit.categorical.R")
source("./R/predict.catfit.R") 
#+END_SRC    


** Data simulation functions

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes  
source("./simulation/estimate.weibulls.R")
source("./simulation/follic.simulation.functions.R")
source("./simulation/follic.run.fun.R")
source("./simulation/follic.output.fun.R")
#+END_SRC    

** Data example

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes  
data(follic, package="randomForestSRC")
follic <- data.table(follic)  
 
#-- convert variables: 
follic[, stage:=as.numeric(clinstg==2)] 
follic[, chemo:=as.numeric(ch=="Y")]
follic <- follic[, -c("clinstg", "ch"), with=FALSE]
#+END_SRC    


Events: 
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output :exports code  :session *R* :cache yes  
follic[, table(status)]     
#+END_SRC    

#+RESULTS[(2022-07-18 09:45:44) e2d3fa94b5da4ac7d6cbcb397de3462640902641]:
: status
:   0   1   2 
: 193 272  76

Distribution of observed time to event: 
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output :exports code  :session *R* :cache yes  
follic[, summary(time)]    
#+END_SRC    

#+RESULTS[(2022-07-18 09:45:47) 0d3a1eea7383758a5ecb9e9d054f33e35d58f0e9]:
:      Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
:  0.002738  1.919233  5.464750  7.393791 10.850103 31.101985

Events before time-horizon of interest:
#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output :exports code  :session *R* :cache yes  
follic[time<=10, table(status)]     
#+END_SRC    

#+RESULTS[(2022-07-18 09:45:50) e1eb7b54ceeb0334e5f132b8cf1e1b4fd3605490]:
: status
:   0   1   2 
:  95 251  46

[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle][Back to top.]]

** Simulation results


#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports none  :session *R* :cache yes
contmle.results <- do.call("rbind", lapply(list("Randomized treatment + independent censoring", "Informative censoring"), function(outer.which) {
    out.inner <- data.table(do.call("rbind", lapply(list("hal", "cox", "rf"), function(inner.initial) {
        try(unlist(follic.output.fun(M = 500,
                                     randomized.treatment = outer.which == "Randomized treatment + independent censoring",
                                     observed.treatment = outer.which != "Randomized treatment + independent censoring",
                                     informative.censoring = outer.which != "Randomized treatment + independent censoring",
                                     observed.covars = TRUE,
                                     fit.initial = inner.initial,
                                     sim.sample = 1000)))
    })))
    out.inner[, initial := c("HAL+TMLE", "Cox+TMLE", "RF+TMLE")][, setting := outer.which]
    return(out.inner[substr(bias.tmle, 1, 5) != "Error"])
}))

contmle.results <- rbind(contmle.results, do.call("rbind", lapply(unique(contmle.results[["setting"]]), function(which) {
    contmle.results[setting == which & tolower(substr(initial,1,3)) == "hal"][, initial := "KM"][, bias.tmle := bias.km][, se.tmle := se.km][, sd.tmle := sd.km][, mse.tmle := mse.km]
})))

survtmle.results <- do.call("rbind", lapply(list("Randomized treatment + independent censoring", "Informative censoring"), function(outer.which) {
    do.call("rbind", lapply(list((0:10)*4, (0:20)*2, (0:40), (0:80)/2), function(inner.grid) {
        out.inner <- data.table(do.call("rbind", lapply(list("glm", "sl"), function(inner.sl) {
            try(unlist(follic.output.survtmle(M = 500,
                                       randomized.treatment = outer.which == "Randomized treatment + independent censoring",
                                       observed.treatment = outer.which != "Randomized treatment + independent censoring",
                                       informative.censoring = outer.which != "Randomized treatment + independent censoring",
                                       observed.covars = TRUE,
                                       sl.survtmle = inner.sl == "sl", 
                                       grid.survtmle = inner.grid, 
                                       sim.sample = 1000)))
        })))
        out.inner[, initial := c("GLM", "SL")][, grid.length.used := length(inner.grid)][, setting := outer.which]
        return(out.inner[substr(bias.survtmle, 1, 5) != "Error"])
    }))
}))

survtmle.results.fixed.grid <- survtmle.results[grid.length.used == 41]
survtmle.results.fixed.grid[, initial := paste0("survtmle (", initial, ")")]
names(survtmle.results.fixed.grid) <- gsub("surv", "", names(survtmle.results.fixed.grid))
tmle.results <- rbind(contmle.results, survtmle.results.fixed.grid, fill = TRUE)
tmle.results[, mse.km := na.locf(mse.km), by = setting]
#+END_SRC


#+BEGIN_SRC R :results file graphics :file ./simulation/output/simultation-results.png :exports none :session *R* :cache yes :height 1500 :width 500
  grid.arrange(ggplot(tmle.results) + theme_bw() + 
	       geom_point(aes(x = initial, y = as.numeric(bias.tmle)), shape = 4) +
	       facet_grid(. ~ setting) +
	       geom_hline(yintercept = 0, linetype = "dashed", col = "red", alpha = 0.5) +
	       ylab("bias") + xlab("") +
	       theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
		     strip.text = element_text(size = 10), 
		     strip.background = element_blank()),
	       ggplot(tmle.results) + theme_bw() +
	       geom_point(aes(x = initial, y = as.numeric(cov.tmle)), shape = 4) +
	       facet_grid(. ~ setting) +
	       geom_hline(yintercept = 0.95, linetype = "dashed", col = "red", alpha = 0.5) +
	       ylab("coverage") + xlab("") +
	       theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
		     strip.text = element_text(size = 10),
		     strip.background = element_blank()),
	       ggplot(tmle.results) + theme_bw() +
	       geom_point(aes(x = initial, y = as.numeric(sd.tmle)/as.numeric(se.tmle)), shape = 4) +
	       facet_grid(. ~ setting) +
	       geom_hline(yintercept = 1, linetype = "dashed", col = "red", alpha = 0.5) +
	       ylab("SD/SE") + xlab("") +
	       theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
		     strip.text = element_text(size = 10),
		     strip.background = element_blank()),
	       ggplot(tmle.results) + theme_bw() + 
	       geom_point(aes(x = initial, y = as.numeric(mse.tmle)/as.numeric(mse.km)), shape = 4) +
	       facet_grid(. ~ setting) +
	       geom_hline(yintercept = 1, linetype = "dashed", col = "red", alpha = 0.5) +
	       ylab("MSE/MSE(KM)") + xlab("") +
	       theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
		     strip.text = element_text(size = 10),  
		     strip.background = element_blank()),
	       ncol=1)
#+END_SRC

#+RESULTS[(2022-07-21 09:57:57) e0f7fcdee9738424abf8a0945048b0d3320bd31b]:
[[file:./simulation/output/simultation-results.png]]

[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle][Back to top.]]

*** More results for survtmle

#+BEGIN_SRC R :results file graphics :file ./simulation/output/survtmle-results.png :exports none :session *R* :cache yes :height 1100 :width 500
grid.arrange(ggplot(survtmle.results) + theme_bw() + 
             geom_point(aes(x = grid.length.used, y = as.numeric(bias.survtmle)), shape = 4) + 
             facet_grid(initial ~ setting) +
             geom_hline(yintercept = 0, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("bias") + xlab("grid length used") +
             theme(strip.text = element_text(size = 9.5),
                   strip.background = element_blank()),
             ggplot(survtmle.results) + theme_bw() +
             geom_point(aes(x = grid.length.used, y = as.numeric(cov.survtmle)), shape = 4) +
             facet_grid(initial ~ setting) +
             geom_hline(yintercept = 0.95, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("coverage") + xlab("grid length used") +
             theme(strip.text = element_text(size = 9.5),
                   strip.background = element_blank()),
             ggplot(survtmle.results) + theme_bw() +
             geom_point(aes(x = grid.length.used, y = as.numeric(sd.survtmle)/as.numeric(se.survtmle)), shape = 4) +
             facet_grid(initial ~ setting) +
             geom_hline(yintercept = 1, linetype = "dashed", col = "red", alpha = 0.5) +
             ylab("SD/SE") + xlab("grid length used") +
             theme(strip.text = element_text(size = 9.5),  
                   strip.background = element_blank())) 
#+END_SRC

#+RESULTS[(2022-07-21 09:58:50) eaba787ea1885eb709e9413f11bc89d01023ed5d]:
[[file:./simulation/output/survtmle-results.png]]

[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle][Back to top.]]

** Sample code

Simulate data with informative censoring: 

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes  
sim.follic <- simulate.follic.3(seed = 100,
                                sim.sample = 1000,
                                informative.censoring = TRUE)
#+END_SRC    

Apply continuous-time TMLE with baseline estimation based on the Poisson-HAL: 

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports code  :session *R* :cache yes  
contmle(sim.follic, estimation=list("outcome"=list(fit="hal", 
                                                   model=Surv(time, status==1)~chemo+stage+hgb+age),
                                    "cens"=list(fit="hal",
                                                model=Surv(time, status==0)~chemo+stage+hgb+age),
                                    "cr2"=list(fit="hal",
                                               model=Surv(time, status==2)~chemo+stage+hgb+age)
                                    ),
        treat.model=chemo~stage+hgb+age,
        treat.effect="ate",
        output.km=TRUE,
        hal.screening=TRUE,
        V=3, lambda.cvs=seq(0.1, 0.03, length=10), maxit=1e5, penalize.time=FALSE,
        tau=10, target=1)
#+END_SRC    

[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle][Back to top.]]


** Baseline hazard estimation

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results none :exports none  :session *R* :cache yes
#######################################################################################
   
#--- try see what super learner would pick
bhaz.cox <- contmle(follic, estimation=list("outcome"=list(fit="sl",
                                                           model=Surv(time, status==1)~chemo+stage+hgb+age,
                                                           lambda.cvs=seq(0.008, 0.02, length=10)),
                                            "cens"=list(fit="sl",
                                                        model=Surv(time, status==0)~chemo+stage+hgb+age),
                                            "cr2"=list(fit="sl",
                                                       model=Surv(time, status==2)~chemo+stage+hgb+age)
                                            ),
                    treat.model=chemo~stage+hgb+age,
                    treat.effect="ate",
                    no.small.steps=500,
                    sl.models=list(mod1=list(Surv(time, status==1)~chemo+stage+hgb+age, t0 = (1:50)/2000)), 
                    output.km=TRUE,
                    output.bhaz=TRUE, 
                    V=3, lambda.cvs=seq(0.1, 0.03, length=10), maxit=1e5, penalize.time=FALSE,
                    verbose=TRUE,
                    iterative=TRUE,
                    tau=20, target=1)

#--- uninformative censoring
bhaz.uninformative.cens <-
    contmle(follic, estimation=list("outcome"=list(fit="sl",
                                                   model=Surv(time, status==1)~chemo+stage+hgb+age,
                                                   lambda.cvs=seq(0.008, 0.02, length=10)),
                                    "cens"=list(fit="cox", model=Surv(time, status==0)~1),
                                    "cr2"=list(fit="sl",
                                               model=Surv(time, status==2)~chemo+stage+hgb+age)
                                    ),
            treat.model=chemo~stage+hgb+age,
            treat.effect="ate", no.small.steps=500,
            sl.models=list(mod1=list(Surv(time, status==1)~chemo+stage+hgb+age, t0 = (1:50)/2000)),
            output.km=TRUE, output.bhaz=TRUE, V=3,
            lambda.cvs=seq(0.1, 0.03, length=10), maxit=1e5, penalize.time=FALSE,
            verbose=TRUE, iterative=TRUE, tau=20, target=1)


#######################################################################################

bhazs <- bhaz.cox[[1]]

bhazs[, chaz1 := cumsum(dhaz1*exp1), by = "chemo"]
bhazs[, chaz2 := cumsum(dhaz2*exp2), by = "chemo"] 
bhazs[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"]

#######################################################################################

#+END_SRC



#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long <- melt(bhazs, id.vars=c("chemo", "time"))   
bhazs.long[, variable2:=substr(variable,1,4)]    
bhazs.long <- bhazs.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.long[, chemo:=paste0("chemo = ", chemo)]
 
ggplot(bhazs.long) + geom_point(aes(x=log(time), y=log(value))) +
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16), 
        plot.title = element_text(size = 16, hjust = 0.9),  
        strip.background = element_blank())+ 
  ylab("log(chaz)") + ggtitle("Log cumulative hazards as functions of log observed event times:")
#+END_SRC

#+RESULTS[(2022-07-18 09:46:32) 6e21f32690012f3f05b1a2c3c0cfa3d81a63eebc]:
[[file:./figures/fig-log-hazards-log-time.png]]

Idea: Fit Weibull distributions that are allowed change over time,
corresponding to enforcing piecewise linearity in the previous plots.

*** Cause one events (with one changepoint)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard1-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
log.t0.1 <- -0.5 
log.t1.1 <- 0.75   
log.t2.1 <- 2 

kmin.1.t1.1 <- min((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])>log.t0.1])
kmax.1.t1.1 <- max((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])<log.t1.1])
kmin.1.t1.0 <- min((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])>log.t0.1])
kmax.1.t1.0 <- max((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])<log.t1.1])

kmin.1.t2.1 <- min((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])>log.t1.1])
kmax.1.t2.1 <- max((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])<log.t2.1])
kmin.1.t2.0 <- min((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])>log.t1.1])
kmax.1.t2.0 <- max((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])<log.t2.1])

#plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t1.1:kmax.1.t1.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t1.1:kmax.1.t1.1]))
fit.status1.t1.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t1.1:kmax.1.t1.1])
#abline(a = coef(fit.status1.t1.1)[1], b = coef(fit.status1.t1.1)[2], col = "red")
(gamma.status1.t1.1 <- coef(fit.status1.t1.1)[2])
(lambda.status1.t1.1 <- exp(coef(fit.status1.t1.1)[1]/gamma.status1.t1.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t1.0:kmax.1.t1.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t1.0:kmax.1.t1.0]))
fit.status1.t1.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t1.0:kmax.1.t1.0])
#abline(a = coef(fit.status1.t1.0)[1], b = coef(fit.status1.t1.0)[2], col = "red")
(gamma.status1.t1.0 <- coef(fit.status1.t1.0)[2])
(lambda.status1.t1.0 <- exp(coef(fit.status1.t1.0)[1]/gamma.status1.t1.0))

# plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t2.1:kmax.1.t2.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t2.1:kmax.1.t2.1]))
fit.status1.t2.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t2.1:kmax.1.t2.1])
#abline(a = coef(fit.status1.t2.1)[1], b = coef(fit.status1.t2.1)[2], col = "red")
(gamma.status1.t2.1 <- coef(fit.status1.t2.1)[2])
(lambda.status1.t2.1 <- exp(coef(fit.status1.t2.1)[1]/gamma.status1.t2.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t2.0:kmax.1.t2.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t2.0:kmax.1.t2.0]))
fit.status1.t2.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t2.0:kmax.1.t2.0])
#abline(a = coef(fit.status1.t2.0)[1], b = coef(fit.status1.t2.0)[2], col = "red")
(gamma.status1.t2.0 <- coef(fit.status1.t2.0)[2])
(lambda.status1.t2.0 <- exp(coef(fit.status1.t2.0)[1]/gamma.status1.t2.0))

bhazs.long[time>=exp(log.t0.1) & time<=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.1*log(lambda.status1.t1.1) + gamma.status1.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.1) & time<=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.0*log(lambda.status1.t1.0) + gamma.status1.t1.0*log(time))]

bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.1*log(lambda.status1.t2.1) + gamma.status1.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.0*log(lambda.status1.t2.0) + gamma.status1.t2.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 1"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.text = element_text(size=16), 
        strip.background = element_blank())+  
  ylab("log(chaz)") + ggtitle("Fitting two straight lines:")
#+END_SRC

#+RESULTS[(2022-07-18 09:46:36) df3167fd31e86f97407caf4d9b8c015c31c2e091]:
[[file:./figures/fig-log-hazards-log-time-hazard1-changepoint.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard1-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",   
           fit.chaz:=exp(gamma.status1.t1.1*log(lambda.status1.t1.1) + gamma.status1.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.0*log(lambda.status1.t1.0) + gamma.status1.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.1*log(lambda.status1.t2.1) + gamma.status1.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.0*log(lambda.status1.t2.0) + gamma.status1.t2.0*log(time))]
 
ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 1"]) +
  geom_point(aes(x=time, y=value)) + 
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.3),
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:") 
#+END_SRC

#+RESULTS[(2022-07-18 09:46:39) b9676aa6e9a48362dfa86be4b6059febe59bac3b]:
[[file:./figures/fig-hazards-time-hazard1-changepoint.png]]

*** Cause one events (add changepoint)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard1-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs <- bhaz.cox[[1]]   
 
bhazs[, chaz1 := cumsum(dhaz1*exp1), by = "chemo"]
bhazs[, chaz2 := cumsum(dhaz2*exp2), by = "chemo"] 
bhazs[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"]

bhazs.long <- melt(bhazs, id.vars=c("chemo", "time")) 
bhazs.long[, variable2:=substr(variable,1,4)] 
bhazs.long <- bhazs.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.long[, chemo:=paste0("chemo = ", chemo)]

log.t0.1 <- -2#-0.5
log.t1.1 <- -0.5#0.75
log.t2.1 <- 2.5#2
log.t3.1 <- 3.5#3

kmin.1.t1.1 <- min((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])>log.t0.1])
kmax.1.t1.1 <- max((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])<log.t1.1])
kmin.1.t1.0 <- min((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])>log.t0.1])
kmax.1.t1.0 <- max((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])<log.t1.1])

kmin.1.t2.1 <- min((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])>log.t1.1])
kmax.1.t2.1 <- max((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])<log.t2.1])
kmin.1.t2.0 <- min((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])>log.t1.1])
kmax.1.t2.0 <- max((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])<log.t2.1])

kmin.1.t3.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t2.1])
kmax.1.t3.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t3.1])
kmin.1.t3.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t2.1])
kmax.1.t3.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t3.1])


#plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t1.1:kmax.1.t1.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t1.1:kmax.1.t1.1]))
fit.status1.t1.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t1.1:kmax.1.t1.1])
#abline(a = coef(fit.status1.t1.1)[1], b = coef(fit.status1.t1.1)[2], col = "red")
(gamma.status1.t1.1 <- coef(fit.status1.t1.1)[2])
(lambda.status1.t1.1 <- exp(coef(fit.status1.t1.1)[1]/gamma.status1.t1.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t1.0:kmax.1.t1.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t1.0:kmax.1.t1.0]))
fit.status1.t1.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t1.0:kmax.1.t1.0])
#abline(a = coef(fit.status1.t1.0)[1], b = coef(fit.status1.t1.0)[2], col = "red")
(gamma.status1.t1.0 <- coef(fit.status1.t1.0)[2])
(lambda.status1.t1.0 <- exp(coef(fit.status1.t1.0)[1]/gamma.status1.t1.0))

# plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t2.1:kmax.1.t2.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t2.1:kmax.1.t2.1]))
fit.status1.t2.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t2.1:kmax.1.t2.1])
#abline(a = coef(fit.status1.t2.1)[1], b = coef(fit.status1.t2.1)[2], col = "red")
(gamma.status1.t2.1 <- coef(fit.status1.t2.1)[2])
(lambda.status1.t2.1 <- exp(coef(fit.status1.t2.1)[1]/gamma.status1.t2.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t2.0:kmax.1.t2.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t2.0:kmax.1.t2.0]))
fit.status1.t2.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t2.0:kmax.1.t2.0])
#abline(a = coef(fit.status1.t2.0)[1], b = coef(fit.status1.t2.0)[2], col = "red")
(gamma.status1.t2.0 <- coef(fit.status1.t2.0)[2])
(lambda.status1.t2.0 <- exp(coef(fit.status1.t2.0)[1]/gamma.status1.t2.0))

# plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t3.1:kmax.1.t3.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t3.1:kmax.1.t3.1]))
fit.status1.t3.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t3.1:kmax.1.t3.1])
#abline(a = coef(fit.status1.t3.1)[1], b = coef(fit.status1.t3.1)[2], col = "red")
(gamma.status1.t3.1 <- coef(fit.status1.t3.1)[2])
(lambda.status1.t3.1 <- exp(coef(fit.status1.t3.1)[1]/gamma.status1.t3.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t3.0:kmax.1.t3.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t3.0:kmax.1.t3.0]))
fit.status1.t3.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t3.0:kmax.1.t3.0])
#abline(a = coef(fit.status1.t3.0)[1], b = coef(fit.status1.t3.0)[2], col = "red")
(gamma.status1.t3.0 <- coef(fit.status1.t3.0)[2])
(lambda.status1.t3.0 <- exp(coef(fit.status1.t3.0)[1]/gamma.status1.t3.0))

bhazs.long[time>=exp(log.t0.1) & time<=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.1*log(lambda.status1.t1.1) + gamma.status1.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.1) & time<=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.0*log(lambda.status1.t1.0) + gamma.status1.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.1*log(lambda.status1.t2.1) + gamma.status1.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.0*log(lambda.status1.t2.0) + gamma.status1.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.1*log(lambda.status1.t3.1) + gamma.status1.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.0*log(lambda.status1.t3.0) + gamma.status1.t3.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 1"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.text = element_text(size=16), 
        strip.background = element_blank())+  
  ylab("log(chaz)") + ggtitle("Fitting three straight lines:")

#+END_SRC

#+RESULTS[(2022-07-18 09:46:41) 6ad7de7dbb0dfc0e9aa25a2b6a8bd831762c2969]:
[[file:./figures/fig-log-hazards-log-time-hazard1-2changepoints.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard1-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",    
           fit.chaz:=exp(gamma.status1.t1.1*log(lambda.status1.t1.1) + gamma.status1.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.0*log(lambda.status1.t1.0) + gamma.status1.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.1*log(lambda.status1.t2.1) + gamma.status1.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.0*log(lambda.status1.t2.0) + gamma.status1.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.1*log(lambda.status1.t3.1) + gamma.status1.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.0*log(lambda.status1.t3.0) + gamma.status1.t3.0*log(time))]
 
ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 1"]) +
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.3),
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:") 
#+END_SRC

#+RESULTS[(2022-07-18 09:46:43) 0304ea12d3f5823e77fcba43d8d4cbba68776d57]:
[[file:./figures/fig-hazards-time-hazard1-2changepoints.png]]


*** Cause one events (three changepoints)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard1-3changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs <- bhaz.cox[[1]]   
 
bhazs[, chaz1 := cumsum(dhaz1*exp1), by = "chemo"]
bhazs[, chaz2 := cumsum(dhaz2*exp2), by = "chemo"] 
bhazs[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"]

bhazs.long <- melt(bhazs, id.vars=c("chemo", "time"))  
bhazs.long[, variable2:=substr(variable,1,4)] 
bhazs.long <- bhazs.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.long[, chemo:=paste0("chemo = ", chemo)]

log.t0.1 <- -1.2#-2#-0.5
log.t1.1 <- 0.75#-0.5#0.75
log.t2.1 <- 2.5#2
log.t3.1 <- 3.15
log.t4.1 <- 3.5#3

kmin.1.t1.1 <- min((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])>log.t0.1])
kmax.1.t1.1 <- max((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])<log.t1.1])
kmin.1.t1.0 <- min((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])>log.t0.1])
kmax.1.t1.0 <- max((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])<log.t1.1])

kmin.1.t2.1 <- min((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])>log.t1.1])
kmax.1.t2.1 <- max((1:nrow(bhazs[chaz1>0 & chemo==1]))[log(bhazs[chaz1>0 & chemo==1][["time"]])<log.t2.1])
kmin.1.t2.0 <- min((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])>log.t1.1])
kmax.1.t2.0 <- max((1:nrow(bhazs[chaz1>0 & chemo==0]))[log(bhazs[chaz1>0 & chemo==0][["time"]])<log.t2.1])

kmin.1.t3.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t2.1])
kmax.1.t3.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t3.1])
kmin.1.t3.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t2.1])
kmax.1.t3.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t3.1])

kmin.1.t4.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t3.1])
kmax.1.t4.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t4.1])
kmin.1.t4.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t3.1])
kmax.1.t4.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t4.1])

#plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t1.1:kmax.1.t1.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t1.1:kmax.1.t1.1]))
fit.status1.t1.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t1.1:kmax.1.t1.1])
#abline(a = coef(fit.status1.t1.1)[1], b = coef(fit.status1.t1.1)[2], col = "red")
(gamma.status1.t1.1 <- coef(fit.status1.t1.1)[2])
(lambda.status1.t1.1 <- exp(coef(fit.status1.t1.1)[1]/gamma.status1.t1.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t1.0:kmax.1.t1.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t1.0:kmax.1.t1.0]))
fit.status1.t1.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t1.0:kmax.1.t1.0])
#abline(a = coef(fit.status1.t1.0)[1], b = coef(fit.status1.t1.0)[2], col = "red")
(gamma.status1.t1.0 <- coef(fit.status1.t1.0)[2])
(lambda.status1.t1.0 <- exp(coef(fit.status1.t1.0)[1]/gamma.status1.t1.0))

# plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t2.1:kmax.1.t2.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t2.1:kmax.1.t2.1]))
fit.status1.t2.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t2.1:kmax.1.t2.1])
#abline(a = coef(fit.status1.t2.1)[1], b = coef(fit.status1.t2.1)[2], col = "red")
(gamma.status1.t2.1 <- coef(fit.status1.t2.1)[2])
(lambda.status1.t2.1 <- exp(coef(fit.status1.t2.1)[1]/gamma.status1.t2.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t2.0:kmax.1.t2.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t2.0:kmax.1.t2.0]))
fit.status1.t2.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t2.0:kmax.1.t2.0])
#abline(a = coef(fit.status1.t2.0)[1], b = coef(fit.status1.t2.0)[2], col = "red")
(gamma.status1.t2.0 <- coef(fit.status1.t2.0)[2])
(lambda.status1.t2.0 <- exp(coef(fit.status1.t2.0)[1]/gamma.status1.t2.0))

# plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t3.1:kmax.1.t3.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t3.1:kmax.1.t3.1]))
fit.status1.t3.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t3.1:kmax.1.t3.1])
#abline(a = coef(fit.status1.t3.1)[1], b = coef(fit.status1.t3.1)[2], col = "red")
(gamma.status1.t3.1 <- coef(fit.status1.t3.1)[2])
(lambda.status1.t3.1 <- exp(coef(fit.status1.t3.1)[1]/gamma.status1.t3.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t3.0:kmax.1.t3.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t3.0:kmax.1.t3.0]))
fit.status1.t3.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t3.0:kmax.1.t3.0])
#abline(a = coef(fit.status1.t3.0)[1], b = coef(fit.status1.t3.0)[2], col = "red")
(gamma.status1.t3.0 <- coef(fit.status1.t3.0)[2])
(lambda.status1.t3.0 <- exp(coef(fit.status1.t3.0)[1]/gamma.status1.t3.0))

# plot(log(bhazs[chaz1>0 & chemo==1][["time"]])[kmin.1.t4.1:kmax.1.t4.1],log(bhazs[chaz1>0 & chemo==1][["chaz1"]][kmin.1.t4.1:kmax.1.t4.1]))
fit.status1.t4.1 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==1][kmin.1.t4.1:kmax.1.t4.1])
#abline(a = coef(fit.status1.t4.1)[1], b = coef(fit.status1.t4.1)[2], col = "red")
(gamma.status1.t4.1 <- coef(fit.status1.t4.1)[2])
(lambda.status1.t4.1 <- exp(coef(fit.status1.t4.1)[1]/gamma.status1.t4.1))
#plot(log(bhazs[chaz1>0 & chemo==0][["time"]])[kmin.1.t4.0:kmax.1.t4.0],log(bhazs[chaz1>0 & chemo==0][["chaz1"]][kmin.1.t4.0:kmax.1.t4.0]))
fit.status1.t4.0 <- lm(log(chaz1)~log(time), data=bhazs[chaz1>0 & chemo==0][kmin.1.t4.0:kmax.1.t4.0])
#abline(a = coef(fit.status1.t4.0)[1], b = coef(fit.status1.t4.0)[2], col = "red")
(gamma.status1.t4.0 <- coef(fit.status1.t4.0)[2])
(lambda.status1.t4.0 <- exp(coef(fit.status1.t4.0)[1]/gamma.status1.t4.0))

bhazs.long[time>=exp(log.t0.1) & time<=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.1*log(lambda.status1.t1.1) + gamma.status1.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.1) & time<=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.0*log(lambda.status1.t1.0) + gamma.status1.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.1*log(lambda.status1.t2.1) + gamma.status1.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.0*log(lambda.status1.t2.0) + gamma.status1.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.1*log(lambda.status1.t3.1) + gamma.status1.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.0*log(lambda.status1.t3.0) + gamma.status1.t3.0*log(time))]
bhazs.long[time>=exp(log.t3.1) & time<=exp(log.t4.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t4.1*log(lambda.status1.t4.1) + gamma.status1.t4.1*log(time))]
bhazs.long[time>=exp(log.t3.1) & time<=exp(log.t4.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t4.0*log(lambda.status1.t4.0) + gamma.status1.t4.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 1"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.text = element_text(size=16), 
        strip.background = element_blank())+  
  ylab("log(chaz)") + ggtitle("Fitting four straight lines:")

#+END_SRC

#+RESULTS[(2022-07-18 09:46:45) 93b32676e648ea4fbfd128cda71c4f7803cd973d]:
[[file:./figures/fig-log-hazards-log-time-hazard1-3changepoints.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard1-3changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 1" & status=="status = 1",     
           fit.chaz:=exp(gamma.status1.t1.1*log(lambda.status1.t1.1) + gamma.status1.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t1.0*log(lambda.status1.t1.0) + gamma.status1.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.1*log(lambda.status1.t2.1) + gamma.status1.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.1) & time<=exp(log.t2.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t2.0*log(lambda.status1.t2.0) + gamma.status1.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.1*log(lambda.status1.t3.1) + gamma.status1.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.1) & time<=exp(log.t3.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t3.0*log(lambda.status1.t3.0) + gamma.status1.t3.0*log(time))]
bhazs.long[time>=exp(log.t3.1) & time<=exp(log.t4.1) & chemo=="chemo = 1" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t4.1*log(lambda.status1.t4.1) + gamma.status1.t4.1*log(time))]
bhazs.long[time>=exp(log.t3.1) & time<=exp(log.t4.1) & chemo=="chemo = 0" & status=="status = 1",
           fit.chaz:=exp(gamma.status1.t4.0*log(lambda.status1.t4.0) + gamma.status1.t4.0*log(time))]
 
ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 1"]) +
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.3),
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:") 
#+END_SRC

#+RESULTS[(2022-07-18 09:46:48) 40713c2fc0860c1cccd6879f9548940c9e2133bc]:
[[file:./figures/fig-hazards-time-hazard1-3changepoints.png]]


[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle][Back to top.]]

*** Cause two events (one changepoint)


#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard2-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
log.t0.2 <- 0      
log.t1.2 <- 1.5 
log.t2.2 <- 3  

kmin.2.t1.1 <- min((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])>log.t0.2])
kmax.2.t1.1 <- max((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])<log.t1.2])
kmin.2.t1.0 <- min((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])>log.t0.2])
kmax.2.t1.0 <- max((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])<log.t1.2])

kmin.2.t2.1 <- min((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])>log.t1.2])
kmax.2.t2.1 <- max((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])<log.t2.2])
kmin.2.t2.0 <- min((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])>log.t1.2])
kmax.2.t2.0 <- max((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])<log.t2.2])

#plot(log(bhazs[chaz2>0 & chemo==1][["time"]])[kmin.2.t1.1:kmax.2.t1.1],log(bhazs[chaz2>0 & chemo==1][["chaz2"]][kmin.2.t1.1:kmax.2.t1.1]))
fit.status2.t1.1 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==1][kmin.2.t1.1:kmax.2.t1.1])
#abline(a = coef(fit.status2.t1.1)[1], b = coef(fit.status2.t1.1)[2], col = "red")
(gamma.status2.t1.1 <- coef(fit.status2.t1.1)[2])
(lambda.status2.t1.1 <- exp(coef(fit.status2.t1.1)[1]/gamma.status2.t1.1))
#plot(log(bhazs[chaz2>0 & chemo==0][["time"]])[kmin.2.t1.0:kmax.2.t1.0],log(bhazs[chaz2>0 & chemo==0][["chaz2"]][kmin.2.t1.0:kmax.2.t1.0]))
fit.status2.t1.0 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==0][kmin.2.t1.0:kmax.2.t1.0])
#abline(a = coef(fit.status2.t1.0)[1], b = coef(fit.status2.t1.0)[2], col = "red")
(gamma.status2.t1.0 <- coef(fit.status2.t1.0)[2])
(lambda.status2.t1.0 <- exp(coef(fit.status2.t1.0)[1]/gamma.status2.t1.0))

# plot(log(bhazs[chaz2>0 & chemo==1][["time"]])[kmin.2.t2.1:kmax.2.t2.1],log(bhazs[chaz2>0 & chemo==1][["chaz2"]][kmin.2.t2.1:kmax.2.t2.1]))
fit.status2.t2.1 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==1][kmin.2.t2.1:kmax.2.t2.1])
#abline(a = coef(fit.status2.t2.1)[1], b = coef(fit.status2.t2.1)[2], col = "red")
(gamma.status2.t2.1 <- coef(fit.status2.t2.1)[2])
(lambda.status2.t2.1 <- exp(coef(fit.status2.t2.1)[1]/gamma.status2.t2.1))
#plot(log(bhazs[chaz2>0 & chemo==0][["time"]])[kmin.2.t2.0:kmax.2.t2.0],log(bhazs[chaz2>0 & chemo==0][["chaz2"]][kmin.2.t2.0:kmax.2.t2.0]))
fit.status2.t2.0 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==0][kmin.2.t2.0:kmax.2.t2.0])
#abline(a = coef(fit.status2.t2.0)[1], b = coef(fit.status2.t2.0)[2], col = "red")
(gamma.status2.t2.0 <- coef(fit.status2.t2.0)[2])
(lambda.status2.t2.0 <- exp(coef(fit.status2.t2.0)[1]/gamma.status2.t2.0))

bhazs.long[time>=exp(log.t0.2) & time<=exp(log.t1.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t1.1*log(lambda.status2.t1.1) + gamma.status2.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.2) & time<=exp(log.t1.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t1.0*log(lambda.status2.t1.0) + gamma.status2.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.2) & time<=exp(log.t2.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.1*log(lambda.status2.t2.1) + gamma.status2.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.2) & time<=exp(log.t2.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.0*log(lambda.status2.t2.0) + gamma.status2.t2.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 2"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.background = element_blank())+
  ylab("log(chaz)") + ggtitle("Fitting two straight lines:")
#+END_SRC

#+RESULTS[(2022-07-18 09:46:50) 7aaddbbfcacbfc9a32c7a4adf116ff54f9b4d990]:
[[file:./figures/fig-log-hazards-log-time-hazard2-changepoint.png]]



#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard2-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.2) & chemo=="chemo = 1" & status=="status = 2",   
           fit.chaz:=exp(gamma.status2.t1.1*log(lambda.status2.t1.1) + gamma.status2.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t1.0*log(lambda.status2.t1.0) + gamma.status2.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.1*log(lambda.status2.t2.1) + gamma.status2.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.0*log(lambda.status2.t2.0) + gamma.status2.t2.0*log(time))]
  
ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 2"]) +  
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.3),
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:")
#+END_SRC

#+RESULTS[(2022-07-18 09:46:52) 61f804f5d3547909a1d3a224a521e7cc28cf3021]:
[[file:./figures/fig-hazards-time-hazard2-changepoint.png]]

*** Cause two events (add changepoint)


#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard2-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs <- bhaz.cox[[1]]   
 
bhazs[, chaz1 := cumsum(dhaz1*exp1), by = "chemo"]
bhazs[, chaz2 := cumsum(dhaz2*exp2), by = "chemo"]
bhazs[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"]
 
bhazs.long <- melt(bhazs, id.vars=c("chemo", "time")) 
bhazs.long[, variable2:=substr(variable,1,4)] 
bhazs.long <- bhazs.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.long[, chemo:=paste0("chemo = ", chemo)]

log.t0.2 <- 0 
log.t1.2 <- 1.5 
log.t2.2 <- 3
log.t3.2 <- 3.6  

kmin.2.t1.1 <- min((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])>log.t0.2])
kmax.2.t1.1 <- max((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])<log.t1.2])
kmin.2.t1.0 <- min((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])>log.t0.2])
kmax.2.t1.0 <- max((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])<log.t1.2])

kmin.2.t2.1 <- min((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])>log.t1.2])
kmax.2.t2.1 <- max((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])<log.t2.2])
kmin.2.t2.0 <- min((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])>log.t1.2])
kmax.2.t2.0 <- max((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])<log.t2.2])

kmin.2.t3.1 <- min((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])>log.t2.2])
kmax.2.t3.1 <- max((1:nrow(bhazs[chaz2>0 & chemo==1]))[log(bhazs[chaz2>0 & chemo==1][["time"]])<log.t3.2])
kmin.2.t3.0 <- min((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])>log.t2.2])
kmax.2.t3.0 <- max((1:nrow(bhazs[chaz2>0 & chemo==0]))[log(bhazs[chaz2>0 & chemo==0][["time"]])<log.t3.2])

#plot(log(bhazs[chaz2>0 & chemo==1][["time"]])[kmin.2.t1.1:kmax.2.t1.1],log(bhazs[chaz2>0 & chemo==1][["chaz2"]][kmin.2.t1.1:kmax.2.t1.1]))
fit.status2.t1.1 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==1][kmin.2.t1.1:kmax.2.t1.1])
#abline(a = coef(fit.status2.t1.1)[1], b = coef(fit.status2.t1.1)[2], col = "red")
(gamma.status2.t1.1 <- coef(fit.status2.t1.1)[2])
(lambda.status2.t1.1 <- exp(coef(fit.status2.t1.1)[1]/gamma.status2.t1.1))
#plot(log(bhazs[chaz2>0 & chemo==0][["time"]])[kmin.2.t1.0:kmax.2.t1.0],log(bhazs[chaz2>0 & chemo==0][["chaz2"]][kmin.2.t1.0:kmax.2.t1.0]))
fit.status2.t1.0 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==0][kmin.2.t1.0:kmax.2.t1.0])
#abline(a = coef(fit.status2.t1.0)[1], b = coef(fit.status2.t1.0)[2], col = "red")
(gamma.status2.t1.0 <- coef(fit.status2.t1.0)[2])
(lambda.status2.t1.0 <- exp(coef(fit.status2.t1.0)[1]/gamma.status2.t1.0))

# plot(log(bhazs[chaz2>0 & chemo==1][["time"]])[kmin.2.t2.1:kmax.2.t2.1],log(bhazs[chaz2>0 & chemo==1][["chaz2"]][kmin.2.t2.1:kmax.2.t2.1]))
fit.status2.t2.1 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==1][kmin.2.t2.1:kmax.2.t2.1])
#abline(a = coef(fit.status2.t2.1)[1], b = coef(fit.status2.t2.1)[2], col = "red")
(gamma.status2.t2.1 <- coef(fit.status2.t2.1)[2])
(lambda.status2.t2.1 <- exp(coef(fit.status2.t2.1)[1]/gamma.status2.t2.1))
#plot(log(bhazs[chaz2>0 & chemo==0][["time"]])[kmin.2.t2.0:kmax.2.t2.0],log(bhazs[chaz2>0 & chemo==0][["chaz2"]][kmin.2.t2.0:kmax.2.t2.0]))
fit.status2.t2.0 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==0][kmin.2.t2.0:kmax.2.t2.0])
#abline(a = coef(fit.status2.t2.0)[1], b = coef(fit.status2.t2.0)[2], col = "red")
(gamma.status2.t2.0 <- coef(fit.status2.t2.0)[2])
(lambda.status2.t2.0 <- exp(coef(fit.status2.t2.0)[1]/gamma.status2.t2.0))

# plot(log(bhazs[chaz2>0 & chemo==1][["time"]])[kmin.2.t3.1:kmax.2.t3.1],log(bhazs[chaz2>0 & chemo==1][["chaz2"]][kmin.2.t3.1:kmax.2.t3.1]))
fit.status2.t3.1 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==1][kmin.2.t3.1:kmax.2.t3.1])
#abline(a = coef(fit.status2.t3.1)[1], b = coef(fit.status2.t3.1)[2], col = "red")
(gamma.status2.t3.1 <- coef(fit.status2.t3.1)[2])
(lambda.status2.t3.1 <- exp(coef(fit.status2.t3.1)[1]/gamma.status2.t3.1))
#plot(log(bhazs[chaz2>0 & chemo==0][["time"]])[kmin.2.t3.0:kmax.2.t3.0],log(bhazs[chaz2>0 & chemo==0][["chaz2"]][kmin.2.t3.0:kmax.2.t3.0]))
fit.status2.t3.0 <- lm(log(chaz2)~log(time), data=bhazs[chaz2>0 & chemo==0][kmin.2.t3.0:kmax.2.t3.0])
#abline(a = coef(fit.status2.t3.0)[1], b = coef(fit.status2.t3.0)[2], col = "red")
(gamma.status2.t3.0 <- coef(fit.status2.t3.0)[2])
(lambda.status2.t3.0 <- exp(coef(fit.status2.t3.0)[1]/gamma.status2.t3.0))

bhazs.long[time>=exp(log.t0.2) & time<=exp(log.t1.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t1.1*log(lambda.status2.t1.1) + gamma.status2.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.2) & time<=exp(log.t1.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t1.0*log(lambda.status2.t1.0) + gamma.status2.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.2) & time<=exp(log.t2.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.1*log(lambda.status2.t2.1) + gamma.status2.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.2) & time<=exp(log.t2.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.0*log(lambda.status2.t2.0) + gamma.status2.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.2) & time<=exp(log.t3.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t3.1*log(lambda.status2.t3.1) + gamma.status2.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.2) & time<=exp(log.t3.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t3.0*log(lambda.status2.t3.0) + gamma.status2.t3.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 2"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.background = element_blank())+
  ylab("log(chaz)") + ggtitle("Fitting three straight lines:")
#+END_SRC

#+RESULTS[(2022-07-18 09:46:54) f08f08a15ee57f0353b88cb59c706dddc5a59eed]:
[[file:./figures/fig-log-hazards-log-time-hazard2-2changepoints.png]]



#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard2-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.2) & chemo=="chemo = 1" & status=="status = 2",   
           fit.chaz:=exp(gamma.status2.t1.1*log(lambda.status2.t1.1) + gamma.status2.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.2) & chemo=="chemo = 0" & status=="status = 2", 
           fit.chaz:=exp(gamma.status2.t1.0*log(lambda.status2.t1.0) + gamma.status2.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.2) & time<=exp(log.t2.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.1*log(lambda.status2.t2.1) + gamma.status2.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.2) & time<=exp(log.t2.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t2.0*log(lambda.status2.t2.0) + gamma.status2.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.2) & chemo=="chemo = 1" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t3.1*log(lambda.status2.t3.1) + gamma.status2.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.2) & chemo=="chemo = 0" & status=="status = 2",
           fit.chaz:=exp(gamma.status2.t3.0*log(lambda.status2.t3.0) + gamma.status2.t3.0*log(time))]
 
ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 2"]) +  
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.3),
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:")
#+END_SRC

#+RESULTS[(2022-07-18 09:46:57) 96e1d24bad0b28f3a6a7c4b2bfe27fb144e21b30]:
[[file:./figures/fig-hazards-time-hazard2-2changepoints.png]]

[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle][Back to top.]]

*** Censoring events (covariate dependent)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard0-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
log.t0.0 <- 1.2   
log.t1.0 <- 1.9    
log.t2.0 <- 3.2 

kmin.0.t1.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t0.0])
kmax.0.t1.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t1.0])
kmin.0.t1.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t0.0])
kmax.0.t1.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t1.0])

kmin.0.t2.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t1.0])
kmax.0.t2.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t2.0])
kmin.0.t2.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t1.0])
kmax.0.t2.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t2.0])

#plot(log(bhazs[chaz0>0 & chemo==1][["time"]])[kmin.0.t1.1:kmax.0.t1.1],log(bhazs[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t1.1:kmax.0.t1.1]))
fit.status0.t1.1 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==1][kmin.0.t1.1:kmax.0.t1.1])
#abline(a = coef(fit.status0.t1.1)[1], b = coef(fit.status0.t1.1)[2], col = "red")
(gamma.status0.t1.1 <- coef(fit.status0.t1.1)[2])
(lambda.status0.t1.1 <- exp(coef(fit.status0.t1.1)[1]/gamma.status0.t1.1))
#plot(log(bhazs[chaz0>0 & chemo==0][["time"]])[kmin.0.t1.0:kmax.0.t1.0],log(bhazs[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t1.0:kmax.0.t1.0]))
fit.status0.t1.0 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==0][kmin.0.t1.0:kmax.0.t1.0])
#abline(a = coef(fit.status0.t1.0)[1], b = coef(fit.status0.t1.0)[2], col = "red")
(gamma.status0.t1.0 <- coef(fit.status0.t1.0)[2])
(lambda.status0.t1.0 <- exp(coef(fit.status0.t1.0)[1]/gamma.status0.t1.0))

# plot(log(bhazs[chaz0>0 & chemo==1][["time"]])[kmin.0.t2.1:kmax.0.t2.1],log(bhazs[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t2.1:kmax.0.t2.1]))
fit.status0.t2.1 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==1][kmin.0.t2.1:kmax.0.t2.1])
#abline(a = coef(fit.status0.t2.1)[1], b = coef(fit.status0.t2.1)[2], col = "red")
(gamma.status0.t2.1 <- coef(fit.status0.t2.1)[2])
(lambda.status0.t2.1 <- exp(coef(fit.status0.t2.1)[1]/gamma.status0.t2.1))
#plot(log(bhazs[chaz0>0 & chemo==0][["time"]])[kmin.0.t2.0:kmax.0.t2.0],log(bhazs[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t2.0:kmax.0.t2.0]))
fit.status0.t2.0 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==0][kmin.0.t2.0:kmax.0.t2.0])
#abline(a = coef(fit.status0.t2.0)[1], b = coef(fit.status0.t2.0)[2], col = "red")
(gamma.status0.t2.0 <- coef(fit.status0.t2.0)[2])
(lambda.status0.t2.0 <- exp(coef(fit.status0.t2.0)[1]/gamma.status0.t2.0))

bhazs.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t1.1*log(lambda.status0.t1.1) + gamma.status0.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t1.0*log(lambda.status0.t1.0) + gamma.status0.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t2.1*log(lambda.status0.t2.1) + gamma.status0.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t2.0*log(lambda.status0.t2.0) + gamma.status0.t2.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.background = element_blank())+ 
  ylab("log(chaz)") + ggtitle("Fitting two straight lines:")
#+END_SRC

#+RESULTS[(2022-07-18 09:46:59) 23ce22695c770b23fc5a5f1342ca2a08fecb82c9]:
[[file:./figures/fig-log-hazards-log-time-hazard0-changepoint.png]]



#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard0-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",     
           fit.chaz:=exp(gamma.status0.t1.1*log(lambda.status0.t1.1) + gamma.status0.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t1.0*log(lambda.status0.t1.0) + gamma.status0.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t2.1*log(lambda.status0.t2.1) + gamma.status0.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.t2.0*log(lambda.status0.t2.0) + gamma.status0.t2.0*log(time))]
 
ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 0"]) + 
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.3), 
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:")
#+END_SRC

#+RESULTS[(2022-07-18 09:47:01) 149107bcf55080ad9ddcc3c5f5b0f6ac2dd9aad9]:
[[file:./figures/fig-hazards-time-hazard0-changepoint.png]]


*** Censoring events (covariate dependent, add changepoint)


#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard0-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs <- bhaz.cox[[1]]  
  
bhazs[, chaz1 := cumsum(dhaz1*exp1), by = "chemo"]
bhazs[, chaz2 := cumsum(dhaz2*exp2), by = "chemo"]
bhazs[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"]

bhazs.long <- melt(bhazs, id.vars=c("chemo", "time")) 
bhazs.long[, variable2:=substr(variable,1,4)] 
bhazs.long <- bhazs.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.long[, chemo:=paste0("chemo = ", chemo)]

log.t0.0 <- 1.2
log.t1.0 <- 1.9   
log.t2.0 <- 3.2
log.t3.0 <- 3.5

kmin.0.t1.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t0.0])
kmax.0.t1.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t1.0])
kmin.0.t1.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t0.0])
kmax.0.t1.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t1.0])

kmin.0.t2.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t1.0])
kmax.0.t2.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t2.0])
kmin.0.t2.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t1.0])
kmax.0.t2.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t2.0])

kmin.0.t3.1 <- min((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])>log.t2.0])
kmax.0.t3.1 <- max((1:nrow(bhazs[chaz0>0 & chemo==1]))[log(bhazs[chaz0>0 & chemo==1][["time"]])<log.t3.0])
kmin.0.t3.0 <- min((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])>log.t2.0])
kmax.0.t3.0 <- max((1:nrow(bhazs[chaz0>0 & chemo==0]))[log(bhazs[chaz0>0 & chemo==0][["time"]])<log.t3.0])

#plot(log(bhazs[chaz0>0 & chemo==1][["time"]])[kmin.0.t1.1:kmax.0.t1.1],log(bhazs[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t1.1:kmax.0.t1.1]))
fit.status0.t1.1 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==1][kmin.0.t1.1:kmax.0.t1.1])
#abline(a = coef(fit.status0.t1.1)[1], b = coef(fit.status0.t1.1)[2], col = "red")
(gamma.status0.t1.1 <- coef(fit.status0.t1.1)[2])
(lambda.status0.t1.1 <- exp(coef(fit.status0.t1.1)[1]/gamma.status0.t1.1))
#plot(log(bhazs[chaz0>0 & chemo==0][["time"]])[kmin.0.t1.0:kmax.0.t1.0],log(bhazs[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t1.0:kmax.0.t1.0]))
fit.status0.t1.0 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==0][kmin.0.t1.0:kmax.0.t1.0])
#abline(a = coef(fit.status0.t1.0)[1], b = coef(fit.status0.t1.0)[2], col = "red")
(gamma.status0.t1.0 <- coef(fit.status0.t1.0)[2])
(lambda.status0.t1.0 <- exp(coef(fit.status0.t1.0)[1]/gamma.status0.t1.0))

# plot(log(bhazs[chaz0>0 & chemo==1][["time"]])[kmin.0.t2.1:kmax.0.t2.1],log(bhazs[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t2.1:kmax.0.t2.1]))
fit.status0.t2.1 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==1][kmin.0.t2.1:kmax.0.t2.1])
#abline(a = coef(fit.status0.t2.1)[1], b = coef(fit.status0.t2.1)[2], col = "red")
(gamma.status0.t2.1 <- coef(fit.status0.t2.1)[2])
(lambda.status0.t2.1 <- exp(coef(fit.status0.t2.1)[1]/gamma.status0.t2.1))
#plot(log(bhazs[chaz0>0 & chemo==0][["time"]])[kmin.0.t2.0:kmax.0.t2.0],log(bhazs[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t2.0:kmax.0.t2.0]))
fit.status0.t2.0 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==0][kmin.0.t2.0:kmax.0.t2.0])
#abline(a = coef(fit.status0.t2.0)[1], b = coef(fit.status0.t2.0)[2], col = "red")
(gamma.status0.t2.0 <- coef(fit.status0.t2.0)[2])
(lambda.status0.t2.0 <- exp(coef(fit.status0.t2.0)[1]/gamma.status0.t2.0))

# plot(log(bhazs[chaz0>0 & chemo==1][["time"]])[kmin.0.t3.1:kmax.0.t3.1],log(bhazs[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t3.1:kmax.0.t3.1]))
fit.status0.t3.1 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==1][kmin.0.t3.1:kmax.0.t3.1])
#abline(a = coef(fit.status0.t3.1)[1], b = coef(fit.status0.t3.1)[2], col = "red")
(gamma.status0.t3.1 <- coef(fit.status0.t3.1)[2])
(lambda.status0.t3.1 <- exp(coef(fit.status0.t3.1)[1]/gamma.status0.t3.1))
#plot(log(bhazs[chaz0>0 & chemo==0][["time"]])[kmin.0.t3.0:kmax.0.t3.0],log(bhazs[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t3.0:kmax.0.t3.0]))
fit.status0.t3.0 <- lm(log(chaz0)~log(time), data=bhazs[chaz0>0 & chemo==0][kmin.0.t3.0:kmax.0.t3.0])
#abline(a = coef(fit.status0.t3.0)[1], b = coef(fit.status0.t3.0)[2], col = "red")
(gamma.status0.t3.0 <- coef(fit.status0.t3.0)[2])
(lambda.status0.t3.0 <- exp(coef(fit.status0.t3.0)[1]/gamma.status0.t3.0))


bhazs.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t1.1*log(lambda.status0.t1.1) + gamma.status0.t1.1*log(time))]
bhazs.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t1.0*log(lambda.status0.t1.0) + gamma.status0.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t2.1*log(lambda.status0.t2.1) + gamma.status0.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t2.0*log(lambda.status0.t2.0) + gamma.status0.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.0) & time<=exp(log.t3.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t3.1*log(lambda.status0.t3.1) + gamma.status0.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.0) & time<=exp(log.t3.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t3.0*log(lambda.status0.t3.0) + gamma.status0.t3.0*log(time))]

ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15), 
        strip.background = element_blank())+ 
  ylab("log(chaz)") + ggtitle("Fitting three straight lines:")
#+END_SRC

#+RESULTS[(2022-07-18 09:47:04) b4b33abbc3e00cbb351f61c356769f942bdbe329]:
[[file:./figures/fig-log-hazards-log-time-hazard0-2changepoints.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard0-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.long[time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",     
                              fit.chaz:=exp(gamma.status0.t1.1*log(lambda.status0.t1.1) + gamma.status0.t1.1*log(time))]
bhazs.long[time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t1.0*log(lambda.status0.t1.0) + gamma.status0.t1.0*log(time))]
bhazs.long[time>=exp(log.t1.0) & time <= exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t2.1*log(lambda.status0.t2.1) + gamma.status0.t2.1*log(time))]
bhazs.long[time>=exp(log.t1.0) & time <= exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t2.0*log(lambda.status0.t2.0) + gamma.status0.t2.0*log(time))]
bhazs.long[time>=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t3.1*log(lambda.status0.t3.1) + gamma.status0.t3.1*log(time))]
bhazs.long[time>=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.t3.0*log(lambda.status0.t3.0) + gamma.status0.t3.0*log(time))]
 
ggplot(bhazs.long[!is.na(fit.chaz) & status=="status = 0"]) + 
  geom_point(aes(x=time, y=value)) + 
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16), 
        plot.title = element_text(size = 16, hjust = -0.1), 
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:")
#+END_SRC

#+RESULTS[(2022-07-18 09:47:06) e27afbfdd29b08e93954f481f8a64f22d5b74888]:
[[file:./figures/fig-hazards-time-hazard0-2changepoints.png]]

[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle][Back to top.]]

*** Censoring events (independent)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard0-independent.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.uninformative.cens <- bhaz.uninformative.cens[[1]]    
bhazs.uninformative.cens[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"] 
 
bhazs.uninformative.cens.long <- melt(bhazs.uninformative.cens, id.vars=c("chemo", "time")) 
bhazs.uninformative.cens.long[, variable2:=substr(variable,1,4)] 
bhazs.uninformative.cens.long <- bhazs.uninformative.cens.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.uninformative.cens.long[, chemo:=paste0("chemo = ", chemo)]

if (FALSE) {

  dev.off()

  grid.arrange(ggplot(bhazs.uninformative.cens.long[status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
               facet_grid(chemo~status, scales="free")+theme_bw()+
               theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
                     strip.text = element_text(size=16), 
                     plot.title = element_text(size = 16, hjust = 0.9),  
                     strip.background = element_blank())+ 
               ylab("log(chaz)") + ggtitle("Log cumulative hazards as functions of log observed event times:"),
               ggplot(bhazs.long[status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
               facet_grid(chemo~status, scales="free")+theme_bw()+
               theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
                     strip.text = element_text(size=16), 
                     plot.title = element_text(size = 16, hjust = 0.9),  
                     strip.background = element_blank())+ 
               ylab("log(chaz)") + ggtitle("Log cumulative hazards as functions of log observed event times:"),
               nrow=1)

}

log.t0.0 <- 1
log.t1.0 <- 3  

kmin.0.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t0.0])
kmax.0.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t1.0])
kmin.0.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t0.0])
kmax.0.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t1.0])

#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.1:kmax.0.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.1:kmax.0.1]))
fit.status0.independent.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.1:kmax.0.1])
#abline(a = coef(fit.status0.independent.1)[1], b = coef(fit.status0.independent.1)[2], col = "red")
gamma.status0.independent.1 <- coef(fit.status0.independent.1)[2]
lambda.status0.independent.1 <- exp(coef(fit.status0.independent.1)[1]/gamma.status0.independent.1)
#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.0:kmax.0.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.0:kmax.0.0]))
fit.status0.independent.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.0:kmax.0.0])
#abline(a = coef(fit.status0.independent.0)[1], b = coef(fit.status0.independent.0)[2], col = "red")
gamma.status0.independent.0 <- coef(fit.status0.independent.0)[2]
lambda.status0.independent.0 <- exp(coef(fit.status0.independent.0)[1]/gamma.status0.independent.0)

bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t0.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.1*log(lambda.status0.independent.1) + gamma.status0.independent.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.0*log(lambda.status0.independent.0) + gamma.status0.independent.0*log(time))]

ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.background = element_blank())+ 
  ylab("log(chaz)") + ggtitle("Fitting a single straight line:")
#+END_SRC

#+RESULTS[(2022-07-18 09:47:07) d5de37f6ebd995448d56f1534221ade3366a95e4]:
[[file:./figures/fig-log-hazards-log-time-hazard0-independent.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard0-independent.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.uninformative.cens.long[chemo=="chemo = 1" & status=="status = 0",     
           fit.chaz:=exp(gamma.status0.independent.1*log(lambda.status0.independent.1) + gamma.status0.independent.1*log(time))]
bhazs.uninformative.cens.long[chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.independent.0*log(lambda.status0.independent.0) + gamma.status0.independent.0*log(time))]
 
ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + 
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.1), 
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:")
#+END_SRC

#+RESULTS[(2022-07-18 09:47:10) e58bc648f467f69cc2a69ce19e0ccb00cc95d7a3]:
[[file:./figures/fig-hazards-time-hazard0-independent.png]]


*** Censoring events (independent, but with changepoint)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard0-independent-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.uninformative.cens <- bhaz.uninformative.cens[[1]]    
bhazs.uninformative.cens[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"] 

bhazs.uninformative.cens.long <- melt(bhazs.uninformative.cens, id.vars=c("chemo", "time")) 
bhazs.uninformative.cens.long[, variable2:=substr(variable,1,4)] 
bhazs.uninformative.cens.long <- bhazs.uninformative.cens.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.uninformative.cens.long[, chemo:=paste0("chemo = ", chemo)]
 
log.t0.0 <- 1.2
log.t1.0 <- 1.9    
log.t2.0 <- 3.5

kmin.0.t1.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t0.0])
kmax.0.t1.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t1.0])
kmin.0.t1.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t0.0])
kmax.0.t1.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t1.0])

kmin.0.t2.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t1.0])
kmax.0.t2.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t2.0])
kmin.0.t2.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t1.0])
kmax.0.t2.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t2.0])

#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.t1.1:kmax.0.t1.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t1.1:kmax.0.t1.1]))
fit.status0.independent.t1.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.t1.1:kmax.0.t1.1])
#abline(a = coef(fit.status0.independent.t1.1)[1], b = coef(fit.status0.independent.t1.1)[2], col = "red")
(gamma.status0.independent.t1.1 <- coef(fit.status0.independent.t1.1)[2])
(lambda.status0.independent.t1.1 <- exp(coef(fit.status0.independent.t1.1)[1]/gamma.status0.independent.t1.1))
#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.t1.0:kmax.0.t1.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t1.0:kmax.0.t1.0]))
fit.status0.independent.t1.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.t1.0:kmax.0.t1.0])
#abline(a = coef(fit.status0.independent.t1.0)[1], b = coef(fit.status0.independent.t1.0)[2], col = "red")
(gamma.status0.independent.t1.0 <- coef(fit.status0.independent.t1.0)[2])
(lambda.status0.independent.t1.0 <- exp(coef(fit.status0.independent.t1.0)[1]/gamma.status0.independent.t1.0))

# plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.t2.1:kmax.0.t2.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t2.1:kmax.0.t2.1]))
fit.status0.independent.t2.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.t2.1:kmax.0.t2.1])
#abline(a = coef(fit.status0.independent.t2.1)[1], b = coef(fit.status0.independent.t2.1)[2], col = "red")
(gamma.status0.independent.t2.1 <- coef(fit.status0.independent.t2.1)[2])
(lambda.status0.independent.t2.1 <- exp(coef(fit.status0.independent.t2.1)[1]/gamma.status0.independent.t2.1))
#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.t2.0:kmax.0.t2.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t2.0:kmax.0.t2.0]))
fit.status0.independent.t2.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.t2.0:kmax.0.t2.0])
#abline(a = coef(fit.status0.independent.t2.0)[1], b = coef(fit.status0.independent.t2.0)[2], col = "red")
(gamma.status0.independent.t2.0 <- coef(fit.status0.independent.t2.0)[2])
(lambda.status0.independent.t2.0 <- exp(coef(fit.status0.independent.t2.0)[1]/gamma.status0.independent.t2.0))

bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t1.1*log(lambda.status0.independent.t1.1) + gamma.status0.independent.t1.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t1.0*log(lambda.status0.independent.t1.0) + gamma.status0.independent.t1.0*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t2.1*log(lambda.status0.independent.t2.1) + gamma.status0.independent.t2.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t2.0*log(lambda.status0.independent.t2.0) + gamma.status0.independent.t2.0*log(time))]

ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.background = element_blank())+  
  ylab("log(chaz)") + ggtitle("Fitting two straight lines:")
#+END_SRC

#+RESULTS[(2022-07-18 09:47:13) f4f900f58826aa68ccaf25ee791ff3c75824ba0e]:
[[file:./figures/fig-log-hazards-log-time-hazard0-independent-changepoint.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard0-independent-changepoint.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.uninformative.cens.long[time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",      
           fit.chaz:=exp(gamma.status0.independent.t1.1*log(lambda.status0.independent.t1.1) + gamma.status0.independent.t1.1*log(time))]
bhazs.uninformative.cens.long[time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.independent.t1.0*log(lambda.status0.independent.t1.0) + gamma.status0.independent.t1.0*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.independent.t2.1*log(lambda.status0.independent.t2.1) + gamma.status0.independent.t2.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
           fit.chaz:=exp(gamma.status0.independent.t2.0*log(lambda.status0.independent.t2.0) + gamma.status0.independent.t2.0*log(time))]
  
ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + 
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.1), 
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:")
#+END_SRC

#+RESULTS[(2022-07-18 09:47:14) 12805702a58cce160a9ac27879da883403b196e0]:
[[file:./figures/fig-hazards-time-hazard0-independent-changepoint.png]]



*** Censoring events (independent, but with two changepoints)

#+BEGIN_SRC R :results file graphics :file ./figures/fig-log-hazards-log-time-hazard0-independent-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.uninformative.cens <- bhaz.uninformative.cens[[1]]   
bhazs.uninformative.cens[, chaz0 := cumsum(dhaz0*exp0), by = "chemo"]  

bhazs.uninformative.cens.long <- melt(bhazs.uninformative.cens, id.vars=c("chemo", "time")) 
bhazs.uninformative.cens.long[, variable2:=substr(variable,1,4)] 
bhazs.uninformative.cens.long <- bhazs.uninformative.cens.long[variable2=="chaz"][, status:=paste0("status = ", gsub("chaz", "", variable))]
bhazs.uninformative.cens.long[, chemo:=paste0("chemo = ", chemo)]

log.t0.0 <- 1.2
log.t1.0 <- 1.9   
log.t2.0 <- 3.2
log.t3.0 <- 3.5

kmin.0.t1.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t0.0])
kmax.0.t1.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t1.0])
kmin.0.t1.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t0.0])
kmax.0.t1.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t1.0])

kmin.0.t2.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t1.0])
kmax.0.t2.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t2.0])
kmin.0.t2.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t1.0])
kmax.0.t2.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t2.0])

kmin.0.t3.1 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])>log.t2.0])
kmax.0.t3.1 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==1]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])<log.t3.0])
kmin.0.t3.0 <- min((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])>log.t2.0])
kmax.0.t3.0 <- max((1:nrow(bhazs.uninformative.cens[chaz0>0 & chemo==0]))[log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])<log.t3.0])

#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.t1.1:kmax.0.t1.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t1.1:kmax.0.t1.1]))
fit.status0.independent.t1.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.t1.1:kmax.0.t1.1])
#abline(a = coef(fit.status0.independent.t1.1)[1], b = coef(fit.status0.independent.t1.1)[2], col = "red")
(gamma.status0.independent.t1.1 <- coef(fit.status0.independent.t1.1)[2])
(lambda.status0.independent.t1.1 <- exp(coef(fit.status0.independent.t1.1)[1]/gamma.status0.independent.t1.1))
#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.t1.0:kmax.0.t1.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t1.0:kmax.0.t1.0]))
fit.status0.independent.t1.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.t1.0:kmax.0.t1.0])
#abline(a = coef(fit.status0.independent.t1.0)[1], b = coef(fit.status0.independent.t1.0)[2], col = "red")
(gamma.status0.independent.t1.0 <- coef(fit.status0.independent.t1.0)[2])
(lambda.status0.independent.t1.0 <- exp(coef(fit.status0.independent.t1.0)[1]/gamma.status0.independent.t1.0))

# plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.t2.1:kmax.0.t2.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t2.1:kmax.0.t2.1]))
fit.status0.independent.t2.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.t2.1:kmax.0.t2.1])
#abline(a = coef(fit.status0.independent.t2.1)[1], b = coef(fit.status0.independent.t2.1)[2], col = "red")
(gamma.status0.independent.t2.1 <- coef(fit.status0.independent.t2.1)[2])
(lambda.status0.independent.t2.1 <- exp(coef(fit.status0.independent.t2.1)[1]/gamma.status0.independent.t2.1))
#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.t2.0:kmax.0.t2.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t2.0:kmax.0.t2.0]))
fit.status0.independent.t2.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.t2.0:kmax.0.t2.0])
#abline(a = coef(fit.status0.independent.t2.0)[1], b = coef(fit.status0.independent.t2.0)[2], col = "red")
(gamma.status0.independent.t2.0 <- coef(fit.status0.independent.t2.0)[2])
(lambda.status0.independent.t2.0 <- exp(coef(fit.status0.independent.t2.0)[1]/gamma.status0.independent.t2.0))

# plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["time"]])[kmin.0.t3.1:kmax.0.t3.1],log(bhazs.uninformative.cens[chaz0>0 & chemo==1][["chaz0"]][kmin.0.t3.1:kmax.0.t3.1]))
fit.status0.independent.t3.1 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==1][kmin.0.t3.1:kmax.0.t3.1])
#abline(a = coef(fit.status0.independent.t3.1)[1], b = coef(fit.status0.independent.t3.1)[2], col = "red")
(gamma.status0.independent.t3.1 <- coef(fit.status0.independent.t3.1)[2])
(lambda.status0.independent.t3.1 <- exp(coef(fit.status0.independent.t3.1)[1]/gamma.status0.independent.t3.1))
#plot(log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["time"]])[kmin.0.t3.0:kmax.0.t3.0],log(bhazs.uninformative.cens[chaz0>0 & chemo==0][["chaz0"]][kmin.0.t3.0:kmax.0.t3.0]))
fit.status0.independent.t3.0 <- lm(log(chaz0)~log(time), data=bhazs.uninformative.cens[chaz0>0 & chemo==0][kmin.0.t3.0:kmax.0.t3.0])
#abline(a = coef(fit.status0.independent.t3.0)[1], b = coef(fit.status0.independent.t3.0)[2], col = "red")
(gamma.status0.independent.t3.0 <- coef(fit.status0.independent.t3.0)[2])
(lambda.status0.independent.t3.0 <- exp(coef(fit.status0.independent.t3.0)[1]/gamma.status0.independent.t3.0))


bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t1.1*log(lambda.status0.independent.t1.1) + gamma.status0.independent.t1.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t0.0) & time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t1.0*log(lambda.status0.independent.t1.0) + gamma.status0.independent.t1.0*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t2.1*log(lambda.status0.independent.t2.1) + gamma.status0.independent.t2.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time<=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t2.0*log(lambda.status0.independent.t2.0) + gamma.status0.independent.t2.0*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t2.0) & time<=exp(log.t3.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t3.1*log(lambda.status0.independent.t3.1) + gamma.status0.independent.t3.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t2.0) & time<=exp(log.t3.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t3.0*log(lambda.status0.independent.t3.0) + gamma.status0.independent.t3.0*log(time))]

ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + geom_point(aes(x=log(time), y=log(value))) +
  geom_line(aes(log(time), y=log(fit.chaz)), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18), legend.position="none",
        strip.text = element_text(size=16),
        plot.title = element_text(size = 16, hjust = -0.15),
        strip.background = element_blank())+  
  ylab("log(chaz)") + ggtitle("Fitting three straight lines:")
#+END_SRC

#+RESULTS[(2022-07-18 09:47:17) 16c05e7e8eb7f3bdde7ec8ade500bc07b59a9ec0]:
[[file:./figures/fig-log-hazards-log-time-hazard0-independent-2changepoints.png]]


#+BEGIN_SRC R :results file graphics :file ./figures/fig-hazards-time-hazard0-independent-2changepoints.png :exports none :session *R* :cache yes :width 500 :height 500
bhazs.uninformative.cens.long[time<=exp(log.t1.0) & chemo=="chemo = 1" & status=="status = 0",    
                              fit.chaz:=exp(gamma.status0.independent.t1.1*log(lambda.status0.independent.t1.1) + gamma.status0.independent.t1.1*log(time))]
bhazs.uninformative.cens.long[time<=exp(log.t1.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t1.0*log(lambda.status0.independent.t1.0) + gamma.status0.independent.t1.0*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time <= exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t2.1*log(lambda.status0.independent.t2.1) + gamma.status0.independent.t2.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t1.0) & time <= exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t2.0*log(lambda.status0.independent.t2.0) + gamma.status0.independent.t2.0*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t2.0) & chemo=="chemo = 1" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t3.1*log(lambda.status0.independent.t3.1) + gamma.status0.independent.t3.1*log(time))]
bhazs.uninformative.cens.long[time>=exp(log.t2.0) & chemo=="chemo = 0" & status=="status = 0",
                              fit.chaz:=exp(gamma.status0.independent.t3.0*log(lambda.status0.independent.t3.0) + gamma.status0.independent.t3.0*log(time))]
 
ggplot(bhazs.uninformative.cens.long[!is.na(fit.chaz) & status=="status = 0"]) + 
  geom_point(aes(x=time, y=value)) +
  geom_line(aes(time, y=fit.chaz), col="red")+
  facet_grid(chemo~status, scales="free")+theme_bw()+
  theme(axis.text=element_text(size=12),axis.title=element_text(size=18),legend.position="none",
        strip.text = element_text(size=16), 
        plot.title = element_text(size = 16, hjust = -0.1), 
        strip.background = element_blank())+
  ylab("chaz") + ggtitle("Resulting cumulative baseline hazards:") 
#+END_SRC

#+RESULTS[(2022-07-18 09:47:19) ffe418cc5ab5c87b605e9ca969350d58142c7519]:
[[file:./figures/fig-hazards-time-hazard0-independent-2changepoints.png]]

[[https://github.com/helenecharlotte/Web-appendix-iterative-competing-risks-tmle][Back to top.]]


